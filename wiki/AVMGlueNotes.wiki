#summary notes about AVMGlue.

== Introduction ==

AVMGlue is all about implementing the *Flash Player API* and *AIR API* so it can works under *redtamarin*.

Basically we have very few ideas about this source code because it is proprietary.

Those notes are here to gather help about implementing this API.


== Flash Platform documentation ==

[http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/ ActionScript® 3.0 Reference for the Adobe® Flash® Platform] (we refer to it as *AS3LCR*).

The official Flash Platform documentation allow us to obtain the classes and methods signatures,
it's not the whole source code but it is a good base.

== Versioning ==

Those API need to be versioned, based on the [https://code.google.com/p/redshell/source/browse/doc/apiversioning.txt API Versioning in AVM] doc and also on the AS3LCR.

the AVM2 rely on those different files
  * [https://code.google.com/p/redshell/source/browse/core/api-versions.xml api-versions.xml]
  * [https://code.google.com/p/redshell/source/browse/core/api-versions.as api-versions.as]
  * [https://code.google.com/p/redshell/source/browse/core/api-versions.h api-versions.h]
  * [https://code.google.com/p/redshell/source/browse/core/api-versions.cpp api-versions.cpp]
  * [https://code.google.com/p/redshell/source/browse/core/api-versions.java api-versions.java]

From *api-versions.xml* we generate AS code that defines a compatibility matrix.

This code is embedded in the release of Flash runtime glue and used by
ASC and AVM to control the visibility of names in the API.

here and example on how it is used<br>
[https://code.google.com/p/redshell/source/browse/core/ByteArray.as ByteArray.as]
{{{
package flash.utils
{

include "api-versions.as"

public class ByteArray implements IDataInput, IDataOutput
{

    /**
     * Compresses the byte array using the deflate compression algorithm.
     * The entire byte array is compressed.
     *
     * @see #inflate()
     * @playerversion Flash 10
     * @playerversion AIR 1.5
     * @langversion 3.0
     *
     * @playerversion Lite 4
     */
    [API(CONFIG::FP_10_0)]
    public function deflate():void
    {
        _compress("deflate");
    }

}

}
}}}


That basically means that the `deflate()` method in the `ByteArray` class is only visible from "Flash Player v10".

Now there is a little trick we need to apply to make all that work, this `[API(CONFIG::FP_10_0)]` is only available to the builtin code,
in your case we build 2 ABC: builtin.abc and shell_toplevel.abc based on how Tamarin works, our API are all declared in "shell_toplevel"
and so we can not use the same versioning as we would do in the "builtin".

There are 2 way to solve that:
  * either we shadow the declarations into public vars<br>`public const API_FP_10_0 = CONFIG::FP_10_0 - 660;`
  * or we define our own set of variables<br>`example here`

in */src/as3/* look at [http://TODO Versioning.as]
{{{
public const AVMGLUE::FP_10_0
}}}

that's what we use

for example: with [http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/crypto/package.html#generateRandomBytes() flash.crypto.generateRandomBytes()]

we can not do this
{{{
package flash.crypto
{

    /**
     * Generates a sequence of random bytes.
     * 
     * @playerversion Flash 11
     * @playerversion AIR 3
     * @langversion 3.0
     */
    [API(CONFIG::SWF_13,CONFIG::AIR_3_0)]
    public function generateRandomBytes( numberRandomBytes:uint ):ByteArray
    {
        //...
    }

}
}}}

we have to do that
{{{
package flash.crypto
{

    /**
     * Generates a sequence of random bytes.
     * 
     * @playerversion Flash 11
     * @playerversion AIR 3
     * @langversion 3.0
     */
    [API(AVMGLUE::SWF_13,AVMGLUE::AIR_3_0)]
    public function generateRandomBytes( numberRandomBytes:uint ):ByteArray
    {
        //...
    }

}
}}}


also we need to compile our code with this special namespace
{{{
TODO
}}}


== UTF-8 Encoding ==

For now, AS3 source code can use UTF-8, and most of stdout can output UTF-8,
but we have some bugs to get UTF-8 from stdin.

Also, some functions like `chdir()` would probably not work with UTF-8 and we need to test and fix that.

[http://www.utf8everywhere.org/ UTF-8 Everywhere]<br>
excellent article and notes about using and implementing UTF-8 in your software.


== POSIX dirent ==

[http://www.softagalleria.net/dirent.php Dirent API for Microsoft Visual Studio]<br>
an implementation of `<dirent.h>` for WIN32.

Windows does not support `<dirent.h>` by default and we want to use it in a cross platform way,
for the CLIB but also in the implementation of RNL.


== uname ==

we need to implement `uname()` for Windows (already done)<br>
see https://code.google.com/p/redtamarin/source/browse/trunk/VMPI/WinPortUtils2.cpp?r=1245#479


== Dynamically loaded library ==

see<br>
[http://en.wikipedia.org/wiki/Dynamic_loading Wikipedia Dynamic_loading] (cross platform)<br>
[http://en.wikipedia.org/wiki/Dynamic-link_library Wikipedia Dynamic-link_library] (windows only)<br>
[http://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html DL libraries] (linux, mac)<br>
[http://tldp.org/HOWTO/C++-dlopen/ C++ dlopen mini HOWTO]<br>


Adobe blog post listing linked libraries for Linux<br>
[http://blogs.adobe.com/penguinswf/2006/09/librarian.html Librarian]
{{{
libdl.so.2
libpthread.so.0
libX11.so.6
libXext.so.6
libXt.so.6
libfreetype.so.6
libfontconfig.so.1
libgtk-x11-2.0.so.0
libgobject-2.0.so.0
libglib-2.0.so.0
libm.so.6
libc.so.6

...

There are 2 more optional libraries:
libasound.so (for ALSA audio I/O)
and libssl.so (for certain SSL connections).

If either library is not present, its representative features will be disabled.
}}}


Adobe blog post about cURL under Linux<br>
[http://blogs.adobe.com/penguinswf/2008/08/curl_tradeoffs.html cURL Tradeoffs]
{{{
We will use dlopen() and dlsym() to load required functions from libcurl.so.4.
If that library is not there, fall back to libcurl.so.3.
}}}


another Adobe blog post<br>
[http://blogs.adobe.com/penguinswf/2006/07/api_review.html API Review]
{{{
General graphics: X11
GUI elements (dialog boxes): GTK
Audio I/O: ALSA
Camera input: Video4Linux, API version 1
Threads: POSIX threads
non-HTTP Networking: BSD sockets
SSL: OpenSSL
IME: you know what? I don’t think we’ve settled on this one yet…
}}}


== mms.cfg / mm.cfg ==

Informations about mms.cfg, shared object paths, installer options, etc.<br>
[http://www.adobe.com/devnet/flashplayer/articles/flash_player_admin_guide.html Adobe Flash Player Administration Guides]<br>
[http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/flashplayer/pdfs/flash_player_11_9_admin_guide.pdf Adobe Flash Player 11.9 Administration Guide] (PDF)<br>
useful for when redtamarin will want to add same behaviour as flash player etc.


== flashsupport.c ==

Little peek into how Linux support SSL, audio, and Video library<br>
[http://www.kaourantin.net/2006/10/extending-reach-of-flash-player-on.html Extending the reach of the Flash Player on Linux]<br>
[http://www.kaourantin.net/flashplayer/flashsupport.c flashsupport.c]<br>
good start for implementations =)


== headless flash player ==

implement a headless flash player with an event loop<br>
[http://blog.kaourantin.net/?p=82 Timing it right]<br>
[https://code.google.com/p/redshell/source/browse/test/performance/canaries/simpleflexapputil/playershell.as?spec=svn09c5c83eea908c195ce602623d78616612252afc&r=fec870a438a8054ec2028deffd990bcec067ba0f playershell.as]<br>
in short, we should be able to provide a basic global event loop with a simple implementation of EventDispatcher
and some polling in a loop locked by a timer or simply the `sleep()` function.


== PNG ==

[http://blog.kaourantin.net/?p=19 PNG support in Flash Player 8]<br>
{{{
we currently fully support:
  IHDR Image header
  IDAT Image data
  PLTE Palette information
  tRNS Transparency extension
  gAMA Image gamma
  IEND End of stream

here are the chunk types we do NOT support
  cHRM Primary chromaticities
  sRGB Standard RGB color space
  iCCP Embedded ICC profile
  tEXt Textual data
  zTXt Compressed textual data
  iTXt International textual data
  bKGD Background color
  pHYs Physical pixel dimensions
  sBIT Significant bits
  sPLT Suggested palette
  hIST Palette histogram
  tIME Image last-modification time
}}}


=== RFC ===

We need to refer to Internet standards to implement some components

Network protocols
  * HTTP - Hypertext Transfer Protocol
    * [http://tools.ietf.org/html/rfc1945 RFC1945] Hypertext Transfer Protocol -- HTTP/1.0
    * [http://tools.ietf.org/html/rfc2616 RFC2616] Hypertext Transfer Protocol -- HTTP/1.1
    * [http://tools.ietf.org/html/rfc6266 RFC6266] Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)
    * [http://tools.ietf.org/html/rfc6585 RFC6585] Additional HTTP Status Codes
    * [http://tools.ietf.org/html/rfc2109 RFC2109] HTTP State Management Mechanism
    * [http://tools.ietf.org/html/rfc2145 RFC2145] Use and Interpretation of HTTP Version Numbers
    * [http://tools.ietf.org/html/rfc2069 RFC2069] An Extension to HTTP : Digest Access Authentication
  * HTTPS - Hypertext Transfer Protocol Secure
    * [http://tools.ietf.org/html/rfc2817 RFC2817] Upgrading to TLS Within HTTP/1.1
    * [http://tools.ietf.org/html/rfc2818 RFC2818] HTTP Over TLS
    * [http://tools.ietf.org/html/rfc2231 RFC2231] MIME Parameter Value and Encoded Word Extensions: Character Sets, Languages, and Continuations
    * [http://tools.ietf.org/html/rfc5987 RFC5987] Character Set and Language Encoding for Hypertext Transfer Protocol (HTTP) Header Field Parameters
  * SOAP - Simple Object Access Protocol
    * [http://tools.ietf.org/html/rfc4227 RFC4227] Using the Simple Object Access Protocol (SOAP) in Blocks Extensible Exchange Protocol (BEEP)
  * UNC - Universal Naming Convention
    * [http://tools.ietf.org/html/rfc3986 RFC3986] Uniform Resource Identifier (URI): Generic Syntax
    * [http://tools.ietf.org/html/rfc3987 RFC3987] Internationalized Resource Identifiers (IRIs)
    * [http://tools.ietf.org/html/rfc5785 RFC5785] Defining Well-Known Uniform Resource Identifiers (URIs)
    * [http://tools.ietf.org/html/rfc3406 RFC3406] Uniform Resource Names (URN) Namespace Definition Mechanisms
    * [http://tools.ietf.org/html/rfc4395 RFC4395] Guidelines and Registration Procedures for New URI Schemes
    * [http://tools.ietf.org/html/rfc2397 RFC2397] The "data" URL scheme
    * [http://tools.ietf.org/html/draft-crhertel-smb-url-12 DRAFT-12] SMB File Sharing URI Scheme
  * TCP/IP
    * [http://tools.ietf.org/html/rfc791 RFC791] INTERNET PROTOCOL
    * [http://tools.ietf.org/html/rfc1349 RFC1349] Type of Service in the Internet Protocol Suite
    * [http://tools.ietf.org/html/rfc6864 RFC6864] Updated Specification of the IPv4 ID Field
    * [http://tools.ietf.org/html/rfc793 RFC793] TRANSMISSION CONTROL PROTOCOL
    * [http://tools.ietf.org/html/rfc3168 RFC3168] The Addition of Explicit Congestion Notification (ECN) to IP
    * [http://tools.ietf.org/html/rfc6093 RFC6093] On the Implementation of the TCP Urgent Mechanism
    * [http://tools.ietf.org/html/rfc6528 RFC6528] Defending against Sequence Number Attacks
    * [http://tools.ietf.org/html/rfc1122 RFC1122] Requirements for Internet Hosts -- Communication Layers
    * [http://tools.ietf.org/html/rfc6298 RFC6298] Computing TCP's Retransmission Timer
  * ICMP
    * [http://tools.ietf.org/html/rfc792 RFC792] INTERNET CONTROL MESSAGE PROTOCOL
    * [http://tools.ietf.org/html/rfc950 RFC950] Internet Standard Subnetting Procedure
    * [http://tools.ietf.org/html/rfc4884 RFC4884] Extended ICMP to Support Multi-Part Messages
    * [http://tools.ietf.org/html/rfc6633 RFC6633] Deprecation of ICMP Source Quench Messages
    * [http://tools.ietf.org/html/rfc6918 RFC] Formally Deprecating Some ICMPv4 Message Types
  * TELNET
    * [http://tools.ietf.org/html/rfc854 RFC854] TELNET PROTOCOL SPECIFICATION
    * [http://tools.ietf.org/html/rfc855 RFC855] TELNET OPTION SPECIFICATIONS
    * [http://tools.ietf.org/html/rfc5198 RFC5198] Unicode Format for Network Interchange
  * FTP
    * [http://tools.ietf.org/html/rfc959 RFC959] FILE TRANSFER PROTOCOL (FTP)
    * [http://tools.ietf.org/html/rfc2228 RFC2228] FTP Security Extensions
    * [http://tools.ietf.org/html/rfc2640 RFC2640] Internationalization of the File Transfer Protocol
    * [http://tools.ietf.org/html/rfc2773 RFC2773] Encryption using KEA and SKIPJACK
    * [http://tools.ietf.org/html/rfc3659 RFC3659] Extensions to FTP
    * [http://tools.ietf.org/html/rfc5797 RFC5797] FTP Command and Extension Registry
  * SMB
  * SSL / Security / Authorization
    * [http://tools.ietf.org/html/rfc2617 RFC2617] HTTP Authentication: Basic and Digest Access Authentication
    * [http://tools.ietf.org/html/rfc6101 RFC6101] The Secure Sockets Layer (SSL) Protocol Version 3.0
    * [http://tools.ietf.org/html/rfc6176 RFC6176] Prohibiting Secure Sockets Layer (SSL) Version 2.0
    * [http://tools.ietf.org/html/rfc5849 RFC5849] The OAuth 1.0 Protocol
    * [http://tools.ietf.org/html/rfc6749 RFC6749] The OAuth 2.0 Authorization Framework
    * [http://tools.ietf.org/html/rfc6750 RFC6750] The OAuth 2.0 Authorization Framework: Bearer Token Usage
  * MISC
    * [http://tools.ietf.org/html/rfc5234 RFC5234] Augmented BNF for Syntax Specifications: ABNF

[http://en.wikipedia.org/wiki/List_of_RFCs List of RFCs]<br>
http://tools.ietf.org/rfc/index<br>
etc.

Adobe protocols and specifications
  * SWF
     * [http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/swf/pdf/swf-file-format-spec.pdf SWF 19] SWF File Format Specification (version 19) (PDF)
     * [http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/swf/pdf/swf-file-format-spec-v10.pdf SWF 10] (PDF)
  * AMF - Action Message Format
     * [http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/amf/pdf/amf-file-format-spec.pdf AMF spec] (PDF)
  * RTMP - Real Time Messaging Protocol
  * RTMPT - RTMP tunneling via HTTP
  * RTMPS - RTMP tunneling via HTTPS
  * RTMFP
    * [http://tools.ietf.org/html/rfc7016 RFC7016] Adobe's Secure Real-Time Media Flow Protocol
