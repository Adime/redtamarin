#summary notes about writing cross platform C/C++.

== Introduction ==

One of the main advantage of the Flash Platform is to be able to write your code in AS3 and have it running across different Operating Systems: Windows, OS X, Linux, Android, etc.

But for this to work you need to have your native implementation (in C/C++) dealing with the cross platform code.

Adobe do a pretty good job at that with Flash and AIR, and gave us in Tamarin a pretty solid layout to do it too.

Here the goal is to keep doing that in *redtamarin*, it is a very high priority.


== Details ==

Here some basic rules and scopes.

We mainly support 3 Operating System
  * Windows
  * Mac OS X
  * Linux

Ideally we try to avoid implementing a native functionality that would work only in 1 Operating System,
but there are off course exceptions.

here 2 examples:

*fork()* will work with Mac OS X and Linux but not Windows<br>
in this particular case the Windows implementation should return an error message "not supported".

*Windows Registry* will work only with Windows and not with Mac OS X or Linux<br>
this API should support a static property `WindowsRegistry.isSupported:Boolean`.


== The Virtual Machine Platform Interface ==

The *Virtual Machine Platform Interface* (or *VMPI*) is how Adobe engineers setup Tamarin,
and we follow the same model for RedTamarin.

Here the general idea:
  * in the *platform* directory you have sub-directory per platform<br>*mac*, *unix*, *win32*, etc.
  * in *VMPI* we define and/or implement a shared API by all those platforms:<br>`VMPI_getenv()`, `VMPI_setenv()`, etc.
  * in the native classes (see the *api* directory) you can only use VMPI functions<br>when it comes to use Operating System API

basically instead of doing this
{{{
#include <stdlib.h>

Stringp SystemClass::getEnvironment(Stringp name)
{
    if (!name) {
        toplevel()->throwArgumentError(kNullArgumentError, "name");
    }

    StUTF8String nameUTF8(name);
    Stringp output = core()->newStringUTF8( "" );

    char *result;
    result = getenv( nameUTF8.c_str() );

    output = output->append( core()->newStringUTF8( result ) );
    return output;
}
}}}

you're doing that
{{{
Stringp SystemClass::getEnvironment(Stringp name)
{
    if (!name) {
        toplevel()->throwArgumentError(kNullArgumentError, "name");
    }

    StUTF8String nameUTF8(name);
    Stringp output = core()->newStringUTF8( "" );

    char *result;
    result = VMPI_getenv( nameUTF8.c_str() );

    output = output->append( core()->newStringUTF8( result ) );
    return output;
}
}}}

here the main reasons why
  * if a particular platform does not support the function call we can throw a "not supported" error from the VMPI function
  * we avoid to use a particular include, `VMPI.h` is used everywhere
  * we use the same function signatures and avoid to use if/else logic
  * if and when we adda new platform we don't have to rewrite the code of the native classes
  * we want to use POSIX even on handicapped platforms like Windows

<br>
<br>

|| see this document [https://docs.google.com/spreadsheet/pub?key=0AjVfZaaIMWOcdEthZmtaUldiQ2V1UUl6UlUtVWo4c1E&output=html Cross Platform POSIX] (google spreadsheet) that illustrate which functions of POSIX are implemented in !RedTamarin. ||

<br>
<br>

== Cross Platform C/C++ References ==

Welcome to hell :)

TODO

=== special case ===

[http://www.utf8everywhere.org/ UTF-8 Everywhere]<br>
excellent article and notes about using and implementing UTF-8 in your software.

[http://www.softagalleria.net/dirent.php Dirent API for Microsoft Visual Studio]<br>
an implementation of `<dirent.h>` for WIN32.

uname<br>
we need to implement `uname()` for Windows (already done)<br>
see https://code.google.com/p/redtamarin/source/browse/trunk/VMPI/WinPortUtils2.cpp?r=1245#479

Dynamically loaded library<br>
[http://en.wikipedia.org/wiki/Dynamic_loading Wikipedia Dynamic_loading] (cross platform)<br>
[http://en.wikipedia.org/wiki/Dynamic-link_library Wikipedia Dynamic-link_library] (windows only)<br>
[http://tldp.org/HOWTO/Program-Library-HOWTO/dl-libraries.html DL libraries] (linux, mac)<br>
[http://tldp.org/HOWTO/C++-dlopen/ C++ dlopen mini HOWTO]<br>


Adobe blog post listing linked libraries for Linux<br>
[http://blogs.adobe.com/penguinswf/2006/09/librarian.html Librarian]
{{{
libdl.so.2
libpthread.so.0
libX11.so.6
libXext.so.6
libXt.so.6
libfreetype.so.6
libfontconfig.so.1
libgtk-x11-2.0.so.0
libgobject-2.0.so.0
libglib-2.0.so.0
libm.so.6
libc.so.6

...

There are 2 more optional libraries:
libasound.so (for ALSA audio I/O)
and libssl.so (for certain SSL connections).

If either library is not present, its representative features will be disabled.
}}}


Adobe blog post about cURL under Linux<br>
[http://blogs.adobe.com/penguinswf/2008/08/curl_tradeoffs.html cURL Tradeoffs]
{{{
We will use dlopen() and dlsym() to load required functions from libcurl.so.4.
If that library is not there, fall back to libcurl.so.3.
}}}

Informations about mms.cfg, shared object paths, installer options, etc.<br>
[http://www.adobe.com/devnet/flashplayer/articles/flash_player_admin_guide.html Adobe Flash Player Administration Guides]<br>
[http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/flashplayer/pdfs/flash_player_11_9_admin_guide.pdf Adobe Flash Player 11.9 Administration Guide] (PDF)<br>
useful for when redtamarin will want to add same behaviour as flash player etc.

Little peek into how Linux support SSL, audio, and Video library<br>
[http://www.kaourantin.net/2006/10/extending-reach-of-flash-player-on.html Extending the reach of the Flash Player on Linux]<br>
[http://www.kaourantin.net/flashplayer/flashsupport.c flashsupport.c]<br>
good start for implementations =)

implement a headless flash player with an event loop<br>
[http://blog.kaourantin.net/?p=82 Timing it right]<br>
[https://code.google.com/p/redshell/source/browse/test/performance/canaries/simpleflexapputil/playershell.as?spec=svn09c5c83eea908c195ce602623d78616612252afc&r=fec870a438a8054ec2028deffd990bcec067ba0f playershell.as]<br>
in short, we should be able to provide a basic global event loop with a simple implementation of EventDispatcher
and some polling in a loop locked by a timer or simply the `sleep()` function.

[http://blog.kaourantin.net/?p=19 PNG support in Flash Player 8]<br>
{{{
we currently fully support:
  IHDR Image header
  IDAT Image data
  PLTE Palette information
  tRNS Transparency extension
  gAMA Image gamma
  IEND End of stream

here are the chunk types we do NOT support
  cHRM Primary chromaticities
  sRGB Standard RGB color space
  iCCP Embedded ICC profile
  tEXt Textual data
  zTXt Compressed textual data
  iTXt International textual data
  bKGD Background color
  pHYs Physical pixel dimensions
  sBIT Significant bits
  sPLT Suggested palette
  hIST Palette histogram
  tIME Image last-modification time
}}}

http://tools.ietf.org/rfc/index
etc.

=== RFC ===

We need to refer to Internet standards to implement some components

Network protocols
  * HTTP - Hypertext Transfer Protocol
    * [http://tools.ietf.org/html/rfc1945 RFC1945] Hypertext Transfer Protocol -- HTTP/1.0
    * [http://tools.ietf.org/html/rfc2616 RFC2616] Hypertext Transfer Protocol -- HTTP/1.1
    * [http://tools.ietf.org/html/rfc6266 RFC6266] Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP)
    * [http://tools.ietf.org/html/rfc6585 RFC6585] Additional HTTP Status Codes
    * [http://tools.ietf.org/html/rfc2109 RFC2109] HTTP State Management Mechanism
    * [http://tools.ietf.org/html/rfc2145 RFC2145] Use and Interpretation of HTTP Version Numbers
    * [http://tools.ietf.org/html/rfc2069 RFC2069] An Extension to HTTP : Digest Access Authentication
  * HTTPS - Hypertext Transfer Protocol Secure
    * [http://tools.ietf.org/html/rfc2817 RFC2817] Upgrading to TLS Within HTTP/1.1
    * [http://tools.ietf.org/html/rfc2818 RFC2818] HTTP Over TLS
    * [http://tools.ietf.org/html/rfc2231 RFC2231] MIME Parameter Value and Encoded Word Extensions: Character Sets, Languages, and Continuations
    * [http://tools.ietf.org/html/rfc5987 RFC5987] Character Set and Language Encoding for Hypertext Transfer Protocol (HTTP) Header Field Parameters
  * SOAP - Simple Object Access Protocol
    * [http://tools.ietf.org/html/rfc4227 RFC4227] Using the Simple Object Access Protocol (SOAP) in Blocks Extensible Exchange Protocol (BEEP)
  * UNC - Universal Naming Convention
    * [http://tools.ietf.org/html/rfc3986 RFC3986] Uniform Resource Identifier (URI): Generic Syntax
    * [http://tools.ietf.org/html/rfc3987 RFC3987] Internationalized Resource Identifiers (IRIs)
    * [http://tools.ietf.org/html/rfc5785 RFC5785] Defining Well-Known Uniform Resource Identifiers (URIs)
    * [http://tools.ietf.org/html/rfc3406 RFC3406] Uniform Resource Names (URN) Namespace Definition Mechanisms
    * [http://tools.ietf.org/html/rfc4395 RFC4395] Guidelines and Registration Procedures for New URI Schemes
    * [http://tools.ietf.org/html/rfc2397 RFC2397] The "data" URL scheme
    * [http://tools.ietf.org/html/draft-crhertel-smb-url-12 DRAFT-12] SMB File Sharing URI Scheme
  * TCP/IP
    * [http://tools.ietf.org/html/rfc791 RFC791] INTERNET PROTOCOL
    * [http://tools.ietf.org/html/rfc1349 RFC1349] Type of Service in the Internet Protocol Suite
    * [http://tools.ietf.org/html/rfc6864 RFC6864] Updated Specification of the IPv4 ID Field
    * [http://tools.ietf.org/html/rfc793 RFC793] TRANSMISSION CONTROL PROTOCOL
    * [http://tools.ietf.org/html/rfc3168 RFC3168] The Addition of Explicit Congestion Notification (ECN) to IP
    * [http://tools.ietf.org/html/rfc6093 RFC6093] On the Implementation of the TCP Urgent Mechanism
    * [http://tools.ietf.org/html/rfc6528 RFC6528] Defending against Sequence Number Attacks
    * [http://tools.ietf.org/html/rfc1122 RFC1122] Requirements for Internet Hosts -- Communication Layers
    * [http://tools.ietf.org/html/rfc6298 RFC6298] Computing TCP's Retransmission Timer
  * ICMP
    * [http://tools.ietf.org/html/rfc792 RFC792] INTERNET CONTROL MESSAGE PROTOCOL
    * [http://tools.ietf.org/html/rfc950 RFC950] Internet Standard Subnetting Procedure
    * [http://tools.ietf.org/html/rfc4884 RFC4884] Extended ICMP to Support Multi-Part Messages
    * [http://tools.ietf.org/html/rfc6633 RFC6633] Deprecation of ICMP Source Quench Messages
    * [http://tools.ietf.org/html/rfc6918 RFC] Formally Deprecating Some ICMPv4 Message Types
  * TELNET
    * [http://tools.ietf.org/html/rfc854 RFC854] TELNET PROTOCOL SPECIFICATION
    * [http://tools.ietf.org/html/rfc855 RFC855] TELNET OPTION SPECIFICATIONS
    * [http://tools.ietf.org/html/rfc5198 RFC5198] Unicode Format for Network Interchange
  * FTP
    * [http://tools.ietf.org/html/rfc959 RFC959] FILE TRANSFER PROTOCOL (FTP)
    * [http://tools.ietf.org/html/rfc2228 RFC2228] FTP Security Extensions
    * [http://tools.ietf.org/html/rfc2640 RFC2640] Internationalization of the File Transfer Protocol
    * [http://tools.ietf.org/html/rfc2773 RFC2773] Encryption using KEA and SKIPJACK
    * [http://tools.ietf.org/html/rfc3659 RFC3659] Extensions to FTP
    * [http://tools.ietf.org/html/rfc5797 RFC5797] FTP Command and Extension Registry
  * SMB
  * SSL / Security / Authorization
    * [http://tools.ietf.org/html/rfc2617 RFC2617] HTTP Authentication: Basic and Digest Access Authentication
    * [http://tools.ietf.org/html/rfc6101 RFC6101] The Secure Sockets Layer (SSL) Protocol Version 3.0
    * [http://tools.ietf.org/html/rfc6176 RFC6176] Prohibiting Secure Sockets Layer (SSL) Version 2.0
    * [http://tools.ietf.org/html/rfc5849 RFC5849] The OAuth 1.0 Protocol
    * [http://tools.ietf.org/html/rfc6749 RFC6749] The OAuth 2.0 Authorization Framework
    * [http://tools.ietf.org/html/rfc6750 RFC6750] The OAuth 2.0 Authorization Framework: Bearer Token Usage
  * MISC
    * [http://tools.ietf.org/html/rfc5234 RFC5234] Augmented BNF for Syntax Specifications: ABNF

[http://en.wikipedia.org/wiki/List_of_RFCs List of RFCs]

Adobe protocols and specifications
  * SWF
     * [http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/swf/pdf/swf-file-format-spec.pdf SWF 19] SWF File Format Specification (version 19) (PDF)
     * [http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/swf/pdf/swf-file-format-spec-v10.pdf SWF 10] (PDF)
  * AMF - Action Message Format
     * [http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/amf/pdf/amf-file-format-spec.pdf AMF spec] (PDF)
  * RTMP - Real Time Messaging Protocol
  * RTMPT - RTMP tunneling via HTTP
  * RTMPS - RTMP tunneling via HTTPS
  * RTMFP
    * [http://tools.ietf.org/html/rfc7016 RFC7016] Adobe's Secure Real-Time Media Flow Protocol


=== online references ===

about cross platform
 * [http://www.crossplatformbook.com/posix.html Cross Platform POSIX.1]
 * [http://patrakov.blogspot.co.uk/2008/10/porting-cc-code-from-unix-to-win32.html Porting C/C++ code from Unix to Win32]
 * https://code.google.com/p/msinttypes/<br>the project fills the absence of stdint.h and inttypes.h in Microsoft Visual Studio.
 * [https://developer.apple.com/library/mac/documentation/Porting/Conceptual/PortingUnix/background/background.html#//apple_ref/doc/uid/TP40002848-TPXREF101 Porting UNIX/Linux Applications to OS X] (Mac Developer Library)
 * [http://fearthecow.net/guest/rosetta/ Porting C/C++ to/from Win32 & Unix - A C/C++ Rosetta Stone]
 * [http://msdn.microsoft.com/en-us/library/y23kc048.aspx Porting from UNIX to Win32] (MSDN)
 * [http://www.ibm.com/developerworks/aix/library/au-porting/index.html Windows to UNIX porting, Part 1: Porting C/C++ sources] (IBM developerWorks)
 * [http://www.ibm.com/developerworks/aix/library/au-porting2/index.html Windows to UNIX porting, Part 2: Internals of porting C/C++ sources] (IBM developerWorks)

some interesting links
 * C Reference Card (ANSI) [http://www.usna.edu/EE/ee462/MANUALS/ansi-c-refcard-letter.pdf PDF]
 * [http://www.cplusplus.com/]
 * [http://www.parashift.com/c++-faq-lite/ C++ FAQ LITE]
 * [http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html The GNU C Reference Manual]
 * Optimizing software in C++: An optimization guide for Windows, Linux and Mac platforms [http://www.agner.org/optimize/ home] [http://www.agner.org/optimize/optimizing_cpp.pdf PDF]
 * [http://www.crossplatformbook.com/posix.html POSIX.1 API Support] (cross reference MacOS X, Linux, MS Visual C++ RTL, Cygwin, MinGW, and NSPR 4.3)
 * [http://www.unix.org/apis.html Unix98 API tables]
 * [http://www.unix.org/version3/apis.html Unix03 (Single Unix Specification) API tables]

some interesting books
 * [http://publications.gbdirect.co.uk/c_book/ The C Book] (free)
 * [http://beej.us/guide/bgc/ Beej's Guide to C Programming] (free)
 * [http://crossplatformbook.com/ Cross-Platform Development in C++] (not free)
 * [http://msdn.microsoft.com/en-us/library/ms811903.aspx MSDN UNIX Application Migration Guide] (free)
 * [http://beej.us/guide/bgnet/ Beej's Guide to Network Programming] (free)
 * [http://beej.us/guide/bgipc/ Beej's Guide to Unix Interprocess Communication] (free)
 * [http://beej.us/guide/bggdb/ Beej's Quick Guide to GDB] (free)


most of the API implemented are double-checked and referenced with
 * [http://www.open-std.org/JTC1/SC22/WG14/www/standards ISO/IEC 9899 - Programming languages - C] [http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf PDF]
 * [http://www.unix.org/single_unix_specification/ The Single UNIX Specification Version 3 Interface]
 * [http://msdn.microsoft.com/en-us/library/59ey50w6.aspx Microsoft Run-Time Library Reference]
 * [http://www.dinkumware.com/manuals/default.aspx?manual=compleat&page=lib_over.html Dinkum Compleat Reference]