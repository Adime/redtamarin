#summary notes about writing cross platform C/C++.

== Introduction ==

One of the main advantage of the Flash Platform is to be able to write your code in AS3 and have it running across different Operating Systems: Windows, OS X, Linux, Android, etc.

But for this to work you need to have your native implementation (in C/C++) dealing with the cross platform code.

Adobe do a pretty good job at that with Flash and AIR, and gave us in Tamarin a pretty solid layout to do it too.

Here the goal is to keep doing that in *redtamarin*, it is a very high priority.


== Details ==

Here some basic rules and scopes.

We mainly support 3 Operating System
  * Windows
  * Mac OS X
  * Linux

Ideally we try to avoid implementing a native functionality that would work only in 1 Operating System,
but there are off course exceptions.

here 2 examples:

*fork()* will work with Mac OS X and Linux but not Windows<br>
in this particular case the Windows implementation should return an error message "not supported".

*Windows Registry* will work only with Windows and not with Mac OS X or Linux<br>
this API should support a static property `WindowsRegistry.isSupported:Boolean`.


see this document [https://docs.google.com/spreadsheet/pub?key=0AjVfZaaIMWOcdEthZmtaUldiQ2V1UUl6UlUtVWo4c1E&output=html Cross Platform POSIX] (google spreadsheet)

The *Virtual Machine Platform Interface* (or Virtual Machine Porting Interface).

Before, we were using ifdef in native classes and it was kind of painful to maintain<br>
see [http://code.google.com/p/redtamarin/source/browse/tags/0.2.5/src/extensions/StdlibClass.cpp#106].

But in the recent updates of Tamarin, Adobe introduced a more elegant way of doing it with *VMPI*.

It basically works like that

You have a common header [http://code.google.com/p/redtamarin/source/browse/tamarin-redux/VMPI/VMPI.h VMPI.h]


This end up being elegant and easy to maintain, and so if we want to add our own cross platform functionalities we need to keep using VMPI.



Under WIN32, even if you compile in a cygwin environment, you should test both with cygwin and a basic command prompt as they don't always react the same ( `argv[0]`, path separator, environment variables, etc.).

Also, if Mac OS X and Linux use both the !PosixPortUtils.cpp, you still have to use either ifdef or another specialized include for special case (eg. !MacDebugUtil.cpp).

== Cross Platform C/C++ ==

Welcome to hell :)

TODO

some interesting links
 * C Reference Card (ANSI) [http://www.usna.edu/EE/ee462/MANUALS/ansi-c-refcard-letter.pdf PDF]
 * [http://www.cplusplus.com/]
 * [http://www.parashift.com/c++-faq-lite/ C++ FAQ LITE]
 * [http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html The GNU C Reference Manual]
 * Optimizing software in C++: An optimization guide for Windows, Linux and Mac platforms [http://www.agner.org/optimize/ home] [http://www.agner.org/optimize/optimizing_cpp.pdf PDF]
 * [http://www.crossplatformbook.com/posix.html POSIX.1 API Support] (cross reference MacOS X, Linux, MS Visual C++ RTL, Cygwin, MinGW, and NSPR 4.3)
 * [http://www.unix.org/apis.html Unix98 API tables]
 * [http://www.unix.org/version3/apis.html Unix03 (Single Unix Specification) API tables]

some interesting books
 * [http://publications.gbdirect.co.uk/c_book/ The C Book] (free)
 * [http://beej.us/guide/bgc/ Beej's Guide to C Programming] (free)
 * [http://crossplatformbook.com/ Cross-Platform Development in C++] (not free)
 * [http://msdn.microsoft.com/en-us/library/ms811903.aspx MSDN UNIX Application Migration Guide] (free)
 * [http://beej.us/guide/bgnet/ Beej's Guide to Network Programming] (free)
 * [http://beej.us/guide/bgipc/ Beej's Guide to Unix Interprocess Communication] (free)
 * [http://beej.us/guide/bggdb/ Beej's Quick Guide to GDB] (free)


most of the API implemented are double-checked and referenced with
 * [http://www.open-std.org/JTC1/SC22/WG14/www/standards ISO/IEC 9899 - Programming languages - C] [http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf PDF]
 * [http://www.unix.org/single_unix_specification/ The Single UNIX Specification Version 3 Interface]
 * [http://msdn.microsoft.com/en-us/library/59ey50w6.aspx Microsoft Run-Time Library Reference]
 * [http://www.dinkumware.com/manuals/default.aspx?manual=compleat&page=lib_over.html Dinkum Compleat Reference]