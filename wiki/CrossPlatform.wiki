#summary notes about writing cross platform C/C++.

== Introduction ==

One of the main advantage of the Flash Platform is to be able to write your code in AS3 and have it running across different Operating Systems: Windows, OS X, Linux, Android, etc.

But for this to work you need to have your native implementation (in C/C++) dealing with the cross platform code.

Adobe do a pretty good job at that with Flash and AIR, and gave us in Tamarin a pretty solid layout to do it too.

Here the goal is to keep doing that in *redtamarin*, it is a very high priority.


== Details ==

Here some basic rules and scopes.

We mainly support 3 Operating System
  * Windows
  * Mac OS X
  * Linux

Ideally we try to avoid implementing a native functionality that would work only in 1 Operating System,
but there are off course exceptions.

here 2 examples:

*fork()* will work with Mac OS X and Linux but not Windows<br>
in this particular case the Windows implementation should return an error message "not supported".

*Windows Registry* will work only with Windows and not with Mac OS X or Linux<br>
this API should support a static property `WindowsRegistry.isSupported:Boolean`.


== The Virtual Machine Platform Interface ==

The *Virtual Machine Platform Interface* (or *VMPI*) is how Adobe engineers setup Tamarin,
and we follow the same model for RedTamarin.

Here the general idea:
  * in the *platform* directory you have sub-directory per platform<br>*mac*, *unix*, *win32*, etc.
  * in *VMPI* we define and/or implement a shared API by all those platforms:<br>`VMPI_getenv()`, `VMPI_setenv()`, etc.
  * in the native classes (see the *api* directory) you can only use VMPI functions when it comes to use Operating System API

basically instead of doing this
{{{
#include <stdlib.h>

Stringp SystemClass::getEnvironment(Stringp name)
{
    if (!name) {
        toplevel()->throwArgumentError(kNullArgumentError, "name");
    }

    StUTF8String nameUTF8(name);
    Stringp output = core()->newStringUTF8( "" );

    char *result;
    result = getenv( nameUTF8.c_str() );

    output = output->append( core()->newStringUTF8( result ) );
    return output;
}
}}}

you're doing that
{{{
Stringp SystemClass::getEnvironment(Stringp name)
{
    if (!name) {
        toplevel()->throwArgumentError(kNullArgumentError, "name");
    }

    StUTF8String nameUTF8(name);
    Stringp output = core()->newStringUTF8( "" );

    char *result;
    result = VMPI_getenv( nameUTF8.c_str() );

    output = output->append( core()->newStringUTF8( result ) );
    return output;
}
}}}

here the main reasons why
  * if a particular platform does not support the function call we can throw a "not supported" error
  * we avoid to use a particular include, `VMPI.h` is used everywhere
  * we use the same function signatures and avoid to use if/else logic
  * if and when we adda new platform we don't have to rewrite the code of the native classes
  * we want to use POSIX even on handicapped platforms like Windows


see this document [https://docs.google.com/spreadsheet/pub?key=0AjVfZaaIMWOcdEthZmtaUldiQ2V1UUl6UlUtVWo4c1E&output=html Cross Platform POSIX] (google spreadsheet) that illustrate which functions of POSIX are implemented in RedTamarin.


== Cross Platform C/C++ ==

Welcome to hell :)

TODO

some interesting links
 * C Reference Card (ANSI) [http://www.usna.edu/EE/ee462/MANUALS/ansi-c-refcard-letter.pdf PDF]
 * [http://www.cplusplus.com/]
 * [http://www.parashift.com/c++-faq-lite/ C++ FAQ LITE]
 * [http://www.gnu.org/software/gnu-c-manual/gnu-c-manual.html The GNU C Reference Manual]
 * Optimizing software in C++: An optimization guide for Windows, Linux and Mac platforms [http://www.agner.org/optimize/ home] [http://www.agner.org/optimize/optimizing_cpp.pdf PDF]
 * [http://www.crossplatformbook.com/posix.html POSIX.1 API Support] (cross reference MacOS X, Linux, MS Visual C++ RTL, Cygwin, MinGW, and NSPR 4.3)
 * [http://www.unix.org/apis.html Unix98 API tables]
 * [http://www.unix.org/version3/apis.html Unix03 (Single Unix Specification) API tables]

some interesting books
 * [http://publications.gbdirect.co.uk/c_book/ The C Book] (free)
 * [http://beej.us/guide/bgc/ Beej's Guide to C Programming] (free)
 * [http://crossplatformbook.com/ Cross-Platform Development in C++] (not free)
 * [http://msdn.microsoft.com/en-us/library/ms811903.aspx MSDN UNIX Application Migration Guide] (free)
 * [http://beej.us/guide/bgnet/ Beej's Guide to Network Programming] (free)
 * [http://beej.us/guide/bgipc/ Beej's Guide to Unix Interprocess Communication] (free)
 * [http://beej.us/guide/bggdb/ Beej's Quick Guide to GDB] (free)


most of the API implemented are double-checked and referenced with
 * [http://www.open-std.org/JTC1/SC22/WG14/www/standards ISO/IEC 9899 - Programming languages - C] [http://www.open-std.org/JTC1/SC22/WG14/www/docs/n1256.pdf PDF]
 * [http://www.unix.org/single_unix_specification/ The Single UNIX Specification Version 3 Interface]
 * [http://msdn.microsoft.com/en-us/library/59ey50w6.aspx Microsoft Run-Time Library Reference]
 * [http://www.dinkumware.com/manuals/default.aspx?manual=compleat&page=lib_over.html Dinkum Compleat Reference]