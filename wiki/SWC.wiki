#summary about the SWC format.

== Introduction ==

A SWC is a library used to shared various components in a zipped form.

It can contains
  * pre-compiled code
  * visual components
  * assets, images, fonts, etc.

With Tamarin you don't really care about SWC<br>
except for one thing: supporting syntax completion in an IDE.

Most of the editors out there
  * Flex Builder 3
  * Flash Builder 4
  * FDT
  * Flash Develop
  * etc.

use the content of one or more SWC to allow syntax completion in the IDE.

See also [http://en.wikipedia.org/wiki/Adobe_SWC_file Adobe SWC file on wikipedia].


== Details ==

Our main problem is that the general SWC out there is generated by COMPC<br>
which reuse `airglobal.swc` or `playerglobal.swc` and compile `*.as` strictly formated code.

As it is, you can not reuse those defaults to create a SWC based on code for Tamarin
  * you can not re-use the `*.abc` files
  * the `*.as` builtin, shell and native classes are not necessarily strictly formated

but there is a trick we can use :).

Thanks to [http://www.victordramba.com/ Victor Dramba] for this trick,<br>
it really made me see the light when I thought no solutions could be found ;).

the trick
 * you can handcraft a very minimalist `builtin.swc`
 * based on what you can find in `playerglobal.swc`
 * very minimalist as you declare only the *builtin* types (Object, Class, Function, etc.)
 * then you can reuse this `builtin.swc` to compile with COMPC others `*.swc` with your native classes

At the condition that you organize your native classes in a strict manner<br>
(eg. only one public per file, one file for each public definition, use typing, etc.)<br>
COMPC will gladly compile the SWC for you.

But even with that, let's analyze what is a SWC.

A SWC is a a ZIP file with the extension `*.swc` which contains 2 files
  * catalog.xml
  * library.swf

a `catalog.xml` file look like that
{{{
<?xml version="1.0" encoding ="utf-8"?>
<swc xmlns="http://www.adobe.com/flash/swccatalog/9">
  <versions>
    <swc version="1.2" />
    <flash version="10.0" build="d566" platform="MAC" />
  </versions>
  <features>
    <feature-script-deps />
    <feature-files />
  </features>
  <libraries>
    <library path="library.swf">
      <script name="ButtonClickSound" mod="1275949831598" >
        <def id="ButtonClickSound" /> 
        <dep id="AS3" type="n" /> 
        <dep id="flash.media:Sound" type="i" /> 
      </script>
      <script name="EndGameSound" mod="1275949831598" >
        <def id="EndGameSound" /> 
        <dep id="AS3" type="n" /> 
        <dep id="flash.media:Sound" type="i" /> 
      </script>
    </library>
  </libraries>
  <files>
  </files>
</swc>
}}}

When you look at the Flex SDK source code<br>
[http://opensource.adobe.com/svn/opensource/flex/sdk/trunk/modules/compiler/src/java/flex2/compiler/swc/catalog/CatalogWriter.java /modules/compiler/src/java/flex2/compiler/swc/catalog/CatalogWriter.java]

you can learn few other things about `catalog.xml`

catalog.xml will always have this header
{{{
<?xml version="1.0" encoding ="utf-8"?>
<swc xmlns="http://www.adobe.com/flash/swccatalog/9">
}}}

followed by a version tag
{{{
  <versions>
    <swc version="1.0" />
    <flex version="2.0" build="0" />
  </versions>
}}}

there the versions can change depending on which version of the Flex SDK you are using<br>
here another one from `playerglobal.swc` for FP10 in the Flex SDK 4
{{{
  <versions>
    <swc version="1.2" />
    <flex version="4.0.0" build="0" />
  </versions>
}}}

then you have a tag `<features>`

then a tag `<components>`

and here where is the real meat, the tag `<libraries>`

here an example
{{{
  <libraries>
    <library path="library.swf">
      <script name="builtin" mod="1206411565548" >
        <def id="parseInt" /> 
        <def id="NaN" /> 
        <def id="int" /> 
        <def id="Number" /> 
        <def id="encodeURI" /> 
        <def id="decodeURI" /> 
        <def id="Function" /> 
        <def id="Array" /> 
        <def id="Boolean" /> 
        <def id="escape" /> 
        <def id="encodeURIComponent" /> 
        <def id="isFinite" /> 
        <def id="undefined" /> 
        <def id="AS3" /> 
        <def id="String" /> 
        <def id="Class" /> 
        <def id="Infinity" /> 
        <def id="isNaN" /> 
        <def id="Namespace" /> 
        <def id="unescape" /> 
        <def id="parseFloat" /> 
        <def id="uint" /> 
        <def id="Object" /> 
        <def id="decodeURIComponent" /> 
        <dep id="TypeError" type="e" /> 
        <dep id="ReferenceError" type="e" /> 
        <dep id="RangeError" type="e" /> 
        <dep id="Error" type="e" /> 
      </script>
    </library>
  </libraries>
}}}

so it works like that, a `*.swf` can contains any amount of `*.abc` files,<br>
for each single `*.as` file taken by the compiler, it will generates a `<script>` tag.

The `<script>` tag have few attributes
  * name : this is in general the name of the doABC2 tag (or the name of the abc if you prefer)
  * mod : this is the last modified time of the file (we could use `FileSystem.getLastModifiedTime( "file.as" )` )
  * signatureChecksum : a checksum of the compiled file (didn;t really invested much time in it as it's kind of optional)

So far, so good, `name` and `mod` we can create or find those easily.

Now let's see what we got inside a `<script>` tag
  * `<def id="">`tag, for a definition
  * a `<dep id="">` tag for a dependency<br>which can have 4 different types
    * `<dep type="i">` for inheritance
    * `<dep type="n">` for namespace
    * `<dep type="s">` for signature
    * `<dep type="e">` for expression

Here the most important tag is the definition `<def>` tag, it tells what is declared/defined<br>
wether it is a constant, variable, function, namespace, class, interface, etc.

The dependency `<dep>` tag, well I think we can ignore it<br>
(at the condition that everything is declared in `<def>` somewhere).


== How to build a custom builtin.swc ==

ALl the following is dead WRONG
{{{
We not gonna use COMPC for sure, because most of our `*.as` classes will simply not compile<br>
for ex: `Date.as`, we want it in the syntax completion, but as it is, it does not compile.

In fact, we want to take directly the `builtin.abc` generate by `builtin.py` and inject it in a `library.swf`<br>
using something like `swfmake.as` should do the job.

Now, our task is to create a `catalog.xml` that will not faill the verification of COMPC and other different IDE.

Once you have a `library.swf` and `catalog.xml`, really it is just a matter to zip it to `whatever.swc`<br>
and voila you got  a nice valid SWC :).
}}}

COMPC can generate very low-level SWC, in fact it's so stupid it's even [http://livedocs.adobe.com/flex/3/html/help.html?content=anttasks_4.html documented here]

look at the part
{{{
<include-sources dir="player/avmplus/core" includes="builtin.as, Date.as, Error.as, Math.as, RegExp.as, XML.as"/>
}}}

So here the recipe to generate SWC for our stuff (no dependencies on playerglobal.swc and non-standard classes layout)

first, you need to override the flex config

*flex-config.xml*
{{{
<?xml version="1.0"?>
<flex-config>
   <compiler>
      <as3>true</as3>
      <es>false</es>
   </compiler>
</flex-config>
}}}
just keep the basis, remove anything else.
<br>

second, include only the stuff you need<br>
for ex: `builtin.py` that generate `builtin.abc`
{{{
os.system(asc+" -builtin "+configs+" -apiversioning -out builtin builtin.as Math.as Error.as Date.as RegExp.as XML.as IDataInput.as IDataOutput.as ByteArray.as ")
}}}

duplicate this for compc
{{{
<include-sources dir="src/tamarin/core" includes="builtin.as, Math.as, Error.as, Date.as, RegExp.as, XML.as, IDataInput.as, IDataOutput.as, ByteArray.as" />
}}}

here an example of the ant task (note I use the Flex SDK 3.2.0, others SDK bigger than v4 seems to not work)
{{{
    <target name="build-builtin-component">
        <compc
            output="bin/builtin.swc"
            target-player="9.0"
        >
            <load-config>flex-config.xml</load-config>
            <define name="CONFIG::BYTEARRAY_API_FLASH"  value="true" />
            <define name="CONFIG::BYTEARRAY_API_AIR" value="false" />
            <strict>false</strict>
            <optimize>true</optimize>
            <warnings>false</warnings>
            <verbose-stacktraces>true</verbose-stacktraces>
            <compute-digest>false</compute-digest>
            <include-sources dir="src/tamarin/core" includes="builtin.as, Math.as, Error.as, Date.as, RegExp.as, XML.as, IDataInput.as, IDataOutput.as, ByteArray.as" />
        </compc>
    </target>
}}}
and voila, you obtain a clean `builtin.swc` without any dependencies on `playerglobal.swc`.
