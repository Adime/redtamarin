#summary socket programming.

== Introduction ==

Since redtamarin v0.3 we added a [Socket] class, and because programming socket can be complex, here a little guide with examples and howtos to get you started.

Here two very good ressources we used for this guide
  * [http://beej.us/guide/bgnet/ Beej's Guide to Network Programming]
  * [http://tangentsoft.net/wskfaq/ Winsock Programmerâ€™s FAQ]


== Events and Logs ==

The [Socket] class is dynamic and define "logging" functions on its prototype.

This allow you to override any of those functions depending on your needs.

It's working like that
  * for each action method, you have an event function defined on the prototype
  * all of these event functions call the `record()` function
  * the `record()` function dispatch a message to other functions like `log()`, `output()`

here the different record mode you can define
  * `recordLogOnly()` (the default)<br>save the messages to an array
  * `recordOutputOnly()`<br>trace the messages to the output
  * `recordAll()`<br>save the messages and trace them to the output

here how you can change how the `record()` function works
{{{
Socket.prototype.record = Socket.prototype.recordAll;
var sock:Socket = new Socket();
}}}

to disable completely the `record()` function just bind to an anonymous function
{{{
Socket.prototype.record = function() {};
var sock:Socket = new Socket();
}}}

to have a custom record function, define your own and override
{{{
import avmplus.FileSystem;
import avmplus.Socket;

Socket.prototype.recordCustom = function( message:String ):void
{
    message = "Socket (" + this.descriptor + "): " + message;
    this.log( message );
    this.output( message );

    //custom
    var file:String = "socketlogs.txt";
    var data:String = "";
    if( FileSystem.exists( file ) )
    {
        data = FileSystem.read( file );
    }
    data += message + "\n";
    FileSystem.write( file, data );
}

Socket.prototype.record = Socket.prototype.recordCustom;

var client:Socket = new Socket();
}}}



== Other stuff ==