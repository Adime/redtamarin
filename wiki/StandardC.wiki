#summary C Standard Libraries.

== Introduction ==

The goal is to be able to call from AS3 the following libraries

 * ANSI Standard library
 assert.h, ctype.h, errno.h, float.h, limits.h, locale.h,<br>
 math.h, setjmp.h, signal.h, stdarg.h, stddef.h,<br>
 stdio.h, stdlib.h, string.h, time.h

 * POSIX.1 library
 that are compatible with
   * Mac OS X (gcc 3.3)
   * Microsoft Windows Runtime Library (MS VIsual C++ 7.0)
   * Linux (gcc 3.2.2)
 unistd.h, dirent.h, etc.<br>
 see: http://www.crossplatformbook.com/posix.html

references:
 * http://en.wikipedia.org/wiki/ANSI_C
 * http://en.wikipedia.org/wiki/POSIX
 * http://en.wikipedia.org/wiki/C_POSIX_library
 * http://en.wikipedia.org/wiki/Category:C_standard_library
 * http://www.cplusplus.com/reference/clibrary/


example:
{{{
//C
#include <stdlib.h>

//char *getenv( const char *name );
char *test = getenv("HOME");
}}}

{{{
//AS3
import C.stdlib.*;

//public function getenv( name:String ):String;
var test:String = getenv( "HOME" );

}}}


advantages:

 * the cross-plaform part is done in the native part (C/C++) of the avmshell so you don't need to bother about it in AS3.
 * most of the function signatures are equivalent, so you don't need to re-learn how to use those functions or really have little to learn.

== Implementation ==

This is what we call the *clib* project (yes clib instead of libc to avoid confusion ;)).

clib AS3 can be found here [http://code.google.com/p/maashaack/source/browse/#svn/platform/clib/trunk/src /platform/clib] (hosted on maashaack)

clib C/C++ can be found here [http://code.google.com/p/redtamarin/source/browse/#svn/api/clib/trunk /api/clib]

All those classes are part of the *avmshell* namespace (C/C++) and part of the *C* package (AS3), and are compiled by default into the *redshell* client.

TODO

== Limitation ==

We can not port everything to AS3, for example in `<stdio.h>` you can use something as `FILE *fopen(const char *restrict filename, const char *restrict mode);`, well... returning a pointer to a `FILE` typedef to AS3 can bring a whole lot of problems so we not gonna do it.

As a general rule, if a C function return a supported type it will be implemented, even a struct we will support it, but as soon as a pointer is involved we just don't do it.

To manipulate files in a "managed" way it will be done with the *File* class in the AVMPlus API.