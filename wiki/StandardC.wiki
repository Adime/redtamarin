#summary C Standard Libraries.

== Introduction ==

The goal is to be able to call from AS3 the following libraries

 * ANSI Standard library
 assert.h, ctype.h, errno.h, float.h, limits.h, locale.h,<br>
 math.h, setjmp.h, signal.h, stdarg.h, stddef.h,<br>
 stdio.h, stdlib.h, string.h, time.h

 * POSIX.1 library
 that are compatible with
   * Mac OS X (gcc 3.3)
   * Microsoft Windows Runtime Library (MS VIsual C++ 7.0)
   * Linux (gcc 3.2.2)
 unistd.h, dirent.h, etc.<br>
 see: http://www.crossplatformbook.com/posix.html

references:
 * http://en.wikipedia.org/wiki/ANSI_C
 * http://en.wikipedia.org/wiki/POSIX
 * http://en.wikipedia.org/wiki/C_POSIX_library
 * http://en.wikipedia.org/wiki/Category:C_standard_library
 * http://www.cplusplus.com/reference/clibrary/


example:
{{{
//C
#include <stdlib.h>

//char *getenv( const char *name );
char test = getenv("HOME");
}}}

{{{
//AS3
import C.stdlib.*;

//public function getenv( name:String ):String;
var test:String = getenv( "HOME" );

}}}


advantages:

 * the cross-plaform part is done in the native part (C/C++) of the avmshell
 so you don't need to bother about it in AS3.
 * most of the function signatures are equivalent,
 so you don't need to re-learn how to use those functions
 or really have little to learn.

=== Implemented ===

note: here we will use the AS3 notation

 * package C.stdlib
 {{{
public const EXIT_SUCCESS:int;
public const EXIT_FAILURE:int;
public function rand():int;
public function abort():void;
public function exit( status:int = 0 ):void;
public function getenv( name:String ):String;
public function setenv( name:String, value:String, rewrite:int = 0 ):int;
public function system( command:String ):int;
 }}}


   