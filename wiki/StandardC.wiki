#summary C more or less standard Libraries.

== Introduction ==

Here we want to provide native implementations of common C functions
based on the *C Standard Library* (C99) and the *POSIX Standard Library* (POSIX.1).

So I edited this page to say "more or less standard", here why:
 * the goal is to provide common cross platform small functionalities, not the whole C library
 * we can not map 1 to 1, C to AS3
 * we try to do something like [http://docs.python.org/library/os.html Python os]
 * in some case we can take some liberties on how something is implemented

references:
 * http://en.wikipedia.org/wiki/C_standard_library
 * http://en.wikipedia.org/wiki/C_POSIX_library

example:
{{{
//C
#include <stdlib.h>

//char *getenv( const char *name );
char *test = getenv("HOME");
}}}

{{{
//AS3
import C.stdlib.*;

//public function getenv( name:String ):String;
var test:String = getenv( "HOME" );

}}}

very similar but still a bunch of differences
 * we use *String*, not *char*
 * we do not return a pointer

other example:
{{{
//C
#include <string.h>

//size_t strlen ( const char * str );
char s[20] = "hello world";
printf( "The string is %u characters long.\n", strlen(s) );
}}}

{{{
//AS3
import C.string.*;

var s:String = "hello world";
//public function strlen( str:String ):uint
var len:uint = strlen(s);
trace( "The string is " + len + " characters long." );
}}}

again, similar but a bunch of differences
 * we completely ignore the typedef *size_t*, we return an unsigned integer
 * we don't make any difference between a *char* or *const char*, we use *String*

advantages:
 * the cross-plaform part is done in the native part (C/C++) of the avmshell so you don't need to bother about it in AS3.
 * most of the function signatures are equivalent, so you don't need to re-learn how to use those functions or really have little to learn.
 * it gives a great cross-platform base to implement higher API

== Implementation ==

This is what we call the *clib* project (yes clib instead of libc to avoid confusion ;)).

clib AS3 can be found here [http://code.google.com/p/maashaack/source/browse/#svn/platform/clib/trunk/src /platform/clib] (hosted on maashaack)

clib C/C++ can be found here [http://code.google.com/p/redtamarin/source/browse/#svn/api/clib/trunk /api/clib]

All those classes are part of the *avmshell* namespace (C/C++) and part of the *C* package (AS3), and are compiled by default into the *redshell* client.

TODO

== Limitation ==

We can not port everything to AS3, for example in `<stdio.h>` you can use something as `FILE *fopen(const char *restrict filename, const char *restrict mode);`, well... returning a pointer to a `FILE` typedef to AS3 can bring a whole lot of problems so we not gonna do it.

As a general rule, if a C function return a supported type it will be implemented, even a struct we will support it, but as soon as a pointer is involved we just don't do it.

To manipulate files in a "managed" way it will be done with the *File* class in the AVMPlus API.