#summary all about the projectors.

=== Introduction ===

A projector is a command-line executable that embed an `*.abc` file with the avmshell (or redshell in our case).

This the *MOST IMPORTANT* feature for redtamarin as it allows to create a single executable and so distribute easily your programs.

With Flash a projector has the following workflow:
 * you create a `*.swf` file
 * you open this `*.swf` with the Standalone Flash Player
 * from the menu `File/Create Projector ...`
 * save

this basically merge the Flash Player `*.exe` and the `*.swf` into one executable.

With Tamarin it is basically the same thing but with some subtle differences.

You can only generate a projector with [ASC]

for example
{{{
$ java -jar asc.jar -AS3 -import builtin.abc -import shell_toplevel.abc -exe redshell testcli.as
}}}

the `-exe` option
{{{
-exe <avmplus path> = emit an EXE file (projector)
}}}

this will create a `testcli.abc` and a `testcli.exe`

the `testcli.exe` merge the `redshell` executable and the `testcli.abc`

This is cool and all but we end up with some issues
 * ASC can not generate a projector from a `*.swf` file
 * the default `avmshell` is more a tool to test the AVM<br>and focus less on executing projectors<br>even if there are plenty of support funtions to do that

=== Details ===

What would happen if Adobe decided to remove projector support ?<br>
Then we could run only `*.abc` files via the shell and that would suck money balls.

So, to avoid that, let's learn how all this is working :).

In the ASC source code<br>
[http://opensource.adobe.com/svn/opensource/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/embedding/Compiler.java /src/macromedia/asc/embedding/Compiler.java]<br>
you have a `createProjector()` function
{{{
    static void createProjector(String avmplus_exe, String pathspec, String scriptname, ByteList bytes)
    {
    	BufferedInputStream exe_in = null;
    	BufferedOutputStream exe_out = null;
    	int bytesWritten = 0;
    	
    	try
    	{
    		exe_in = new BufferedInputStream(new FileInputStream(new File(avmplus_exe)));
    		
    		int abc_length = bytes.size();
    		
    		int avmplus_exe_length = exe_in.available();
    		byte avmplus_exe_bytes[] = new byte[avmplus_exe_length];
    		exe_in.read(avmplus_exe_bytes);
    		    		
    		exe_out = new BufferedOutputStream(new FileOutputStream(new File(pathspec, scriptname + ".exe")));
    		
    		exe_out.write(avmplus_exe_bytes);
    		bytesWritten += avmplus_exe_bytes.length;
    		
    		exe_out.write(bytes.toByteArray());
    		bytesWritten += abc_length;

    		byte header[] = new byte[8];
    		header[0] = 0x56;
    		header[1] = 0x34;
    		header[2] = 0x12;
    		header[3] = (byte) 0xFA;
    		header[4] = (byte) (abc_length & 0xFF);
    		header[5] = (byte) ((abc_length>>8) & 0xFF);
    		header[6] = (byte) ((abc_length>>16) & 0xFF);
    		header[7] = (byte) ((abc_length>>24) & 0xFF);
    		exe_out.write(header);
    		
    		bytesWritten += 8;
    		
    		exe_out.flush();
    	}
		catch (IOException ex)
		{
			ex.printStackTrace();
		}
		finally
		{
			if (exe_in != null)
			{
				try
				{
					exe_in.close();
				}
				catch (IOException ex)
				{
				}
			}
			if (exe_out != null)
			{
				try
				{
					exe_out.close();
				}
				catch (IOException ex)
				{
				}
			}
		}
	
		System.err.println(scriptname + ".exe, " + bytesWritten + " bytes written");
	}
}}}

in the Tamarin source code<br>
[http://code.google.com/p/redtamarin/source/browse/tamarin-redux/shell/ShellCore.cpp?r=710 /tamarin-redux/shell/ShellCore.cpp]<br>
you have `executeProjector()`, `isValidProjectorFile()`
{{{
    // Run a known projector file
    int ShellCore::executeProjector(char *executablePath)
    {
        AvmAssert(isValidProjectorFile(executablePath));

        uint8_t header[8];

        FileInputStream file(executablePath);

        file.seek(file.length() - 8);
        file.read(header, 8);

        int abcLength = (header[4]     |
                         header[5]<<8  |
                         header[6]<<16 |
                         header[7]<<24);

        ScriptBuffer code = newScriptBuffer(abcLength);
        file.seek(file.length() - 8 - abcLength);
        file.read(code.getBuffer(), abcLength);

        return handleArbitraryExecutableContent(code, executablePath);
    }

    /* static */
    bool ShellCore::isValidProjectorFile(const char* filename)
    {
        FileInputStream file(filename);
        uint8_t header[8];

        if (!file.valid())
            return false;

        file.seek(file.length() - 8);
        file.read(header, 8);

        // Check the magic number
        if (header[0] != 0x56 || header[1] != 0x34 || header[2] != 0x12 || header[3] != 0xFA)
            return false;

        return true;
    }
}}}

here the structure of a projector
{{{
    | executable bytes | abc bytes | projector header 8 bytes |
}}}

the important part is the projector header
{{{
    | projector header |
       |_ magic number = 0x56 0x34 0x12 0xFA
       |_ abc packed length = LEN | LEN<<8 |  LEN<<16 | LEN<<24
}}}

how do we know if we are a projector ?
 * read the last 8 bytes
 * the first 4 bytes is the magic number `0x56 0x34 0x12 0xFA`
 * the following 4 bytes is the abc file length

how do we extract an abc file from a projector ?
 * read the last 8 bytes
 * the first 4 bytes is the magic number `0x56 0x34 0x12 0xFA`
 * the following 4 bytes is the abc file length
 * from the end of the executable minus 8 bytes, read the abc file length

and there is more :)
 * it is the same principle and signature for a Flash projector<br>(yes you can easily extract a `*.swf` from a projector)
 * you are not limited to embed `*.abc`, you can also embed a `*.swf` file<br>Tamarin will extract the `*.swf` file the same way it extracts an `*.abc` file<br>and then will parse the `*.swf` file to extract all the contained `*.abc` files

`ShellCore.cpp` does support `*.abc` files AND `*.swf` files
{{{
    int ShellCore::handleArbitraryExecutableContent(ScriptBuffer& code, const char * filename)
    {
        setStackLimit();

        TRY(this, kCatchAction_ReportAsError)
        {
            if (AbcParser::canParse(code) == 0) {
                #ifdef VMCFG_VERIFYALL
                if (config.verbose_vb & VB_verify)
                    console << "ABC " << filename << "\n";
                #endif

                uint32_t api = this->getAPI(NULL);
                handleActionBlock(code, 0, shell_toplevel, NULL, user_codeContext, api);
            }
            else if (isSwf(code)) {
                #ifdef VMCFG_VERIFYALL
                if (config.verbose_vb & VB_verify)
                    console << "SWF " << filename << "\n";
                #endif
                handleSwf(filename, code, shell_toplevel, user_codeContext);
            }
            else {
                console << "unknown input format in file: " << filename << "\n";
                return(1);
            }
        }
        CATCH(Exception *exception)
        {
            TRY(this, kCatchAction_ReportAsError)
            {
                console << string(exception->atom) << "\n";
            }
            CATCH(Exception * e2)
            {
                (void)e2;
                console << "Sorry, an exception occurred but could not be reported\n";
            }
            END_CATCH
            END_TRY

            return 1;
        }
        END_CATCH
        END_TRY

        return 0;
    }
}}}

From there, not only we will be able to generate a projector from AS3,<br>
but we will also be able to create a projector from a `*.swf` file<br>
and that means we can reuse `*.abc` files as libraries (kind of like a `*.swc`).

TODO (talk about tools here)

*createprojector*<br>
see [http://code.google.com/p/redtamarin/source/browse/samples/createprojector.as /samples/createprojector.as]
{{{
Usage:
 createprojector [-exe avmshell] [-o filename] file
 file           a *.swf or *.abc file
 -exe avmshell  the avmshell executable to use
 -o filename    defines the name of the output file
}}}




=== Misc. ===

Where to find the Flash Player projectors:<br>
[http://kb2.adobe.com/cps/142/tn_14266.html Archived Flash Player versions]

example:
 * unzip `flashplayer10r42_34_mac_sa_debug.app.zip`
 * run `Flash Player.app`