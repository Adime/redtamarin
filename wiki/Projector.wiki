#summary all about the projectors.

=== Introduction ===

A projector is a command-line executable that embed an `*.abc` file with the avmshell (or redshell in our case).

This the *MOST IMPORTANT* feature for redtamarin as it allows to create a single executable and so distribute easily your programs.

With Flash a projector have the following workflow:
 * you create a `*.swf` file
 * you open this `*.swf` with the Standalone Flash Player
 * from the menu `File/Create Projector ...`
 * save

this basically merge the Flash Player `*.exe` and the `*.swf` into one executable.

With Tamarin it is basically the same thing but with some subtle differences.

You can only generate a projector with [ASC]

for example
{{{
$ java -jar asc.jar -AS3 -import builtin.abc -import shell_toplevel.abc -exe redshell testcli.as
}}}

the `-exe` option
{{{
-exe <avmplus path> = emit an EXE file (projector)
}}}

this will create a `testcli.abc` and a `testcli.exe`

the `testcli.exe` merge the `redshell` executable and the `testcli.abc`

This is cool and all but we end up with some issues
 * ASC can not generate a projector from a `*.swf` file
 * the default `avmshell` is more a tool to test the AVM<br>and focus less on executing projectors<br>even if there are plenty of support funtions to do that

=== Details ===

What would happen if Adobe decided to remove projector support ?<br>
Then we could run only `*.abc` files via the shell and that would suck money balls.

So, to avoid that, let's learn how all this is working :).

In the ASC source code<br>
[http://opensource.adobe.com/svn/opensource/flex/sdk/trunk/modules/asc/src/java/macromedia/asc/embedding/Compiler.java /src/macromedia/asc/embedding/Compiler.java]<br>
you have a `createProjector()` function
{{{
    static void createProjector(String avmplus_exe, String pathspec, String scriptname, ByteList bytes)
    {
    	BufferedInputStream exe_in = null;
    	BufferedOutputStream exe_out = null;
    	int bytesWritten = 0;
    	
    	try
    	{
    		exe_in = new BufferedInputStream(new FileInputStream(new File(avmplus_exe)));
    		
    		int abc_length = bytes.size();
    		
    		int avmplus_exe_length = exe_in.available();
    		byte avmplus_exe_bytes[] = new byte[avmplus_exe_length];
    		exe_in.read(avmplus_exe_bytes);
    		    		
    		exe_out = new BufferedOutputStream(new FileOutputStream(new File(pathspec, scriptname + ".exe")));
    		
    		exe_out.write(avmplus_exe_bytes);
    		bytesWritten += avmplus_exe_bytes.length;
    		
    		exe_out.write(bytes.toByteArray());
    		bytesWritten += abc_length;

    		byte header[] = new byte[8];
    		header[0] = 0x56;
    		header[1] = 0x34;
    		header[2] = 0x12;
    		header[3] = (byte) 0xFA;
    		header[4] = (byte) (abc_length & 0xFF);
    		header[5] = (byte) ((abc_length>>8) & 0xFF);
    		header[6] = (byte) ((abc_length>>16) & 0xFF);
    		header[7] = (byte) ((abc_length>>24) & 0xFF);
    		exe_out.write(header);
    		
    		bytesWritten += 8;
    		
    		exe_out.flush();
    	}
		catch (IOException ex)
		{
			ex.printStackTrace();
		}
		finally
		{
			if (exe_in != null)
			{
				try
				{
					exe_in.close();
				}
				catch (IOException ex)
				{
				}
			}
			if (exe_out != null)
			{
				try
				{
					exe_out.close();
				}
				catch (IOException ex)
				{
				}
			}
		}
	
		System.err.println(scriptname + ".exe, " + bytesWritten + " bytes written");
	}
}}}



=== Misc. ===

Where to find the Flash Player projectors:<br>
[http://kb2.adobe.com/cps/142/tn_14266.html Archived Flash Player versions]

example:
 * unzip `flashplayer10r42_34_mac_sa_debug.app.zip`
 * run `Flash Player.app`