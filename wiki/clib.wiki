#summary The C Standard Library for AS3.

== Introduction ==

From the beginning, redtamarin added a bit of support for C-like functions and packages.

We were calling that "a more or less standard C library" ;).

Now, as we want to do the right thing, we want to provide as much support as possible, put things at the right place and avoid shortcuts if possible.

The main principle still is the same

if you have this in *C*
{{{
//C
#include <stdlib.h>

//char *getenv( const char *name );
char *test = getenv("HOME");
}}}

then you can have this in *AS3*
{{{
//AS3
import C.stdlib.*;

//public function getenv( name:String ):String;
var test:String = getenv( "HOME" );
}}}

<br/>
<br/>
these are the main reasons to do that

  # in general, C give you a low-level universal access to things<br/>wether you know `chmod` on the command line or you used `mkdir()` in PHP, Python, etc.<br/>you already used a bit of *C* somewhere.
  # building uppon this kind of low-level you can build bigger things<br/>in our case we will reuse `mkdir()` to define `FileSystem.makeDirectory()`<br/>maybe you want to build your own API or do things a bit differently<br/>if only you had access to `mkdir()`...well you have access!!
  # A C library help to port to AS3 other kind of libraries,<br/>either duplicate something you have seen done in Python or Ruby, etc<br/>or easily port a C code example to AS3.
  # Those C libraries are mainly functions and are easily portable and sharable<br/>(we know from our experience with maashaack *core* package)
  # it helps at the same time C developers coming to AS3<br/>and AS3 developers learning/reusing C.

<br/>
But let's be clear, we are not saying we giving you a way to compile C to AS3 (if you need that use ANE or CrossBridge).

No, what we are saying is that we give you a way to integrates "C style programming and functionalities" into your AS3 program.

It is not perfect and have limitations, but when you want to build things for the command line and the server side it can come very handy.

<br/>

== What do we support exactly ? ==

We plan to support

The *C standard library*
  * *ANSI C* (C89)
  * *ISO C* (C90)

with those headers:
  * `<assert.h>`
  * `<ctype.h>`
  * `<errno.h>`
  * `<float.h>`
  * `<limits.h>`
  * `<locale.h>`
  * `<math.h>`
  * `<setjmp.h>`
  * `<signal.h>`
  * `<stdarg.h>`
  * `<stddef.h>`
  * `<stdio.h>`
  * `<stdlib.h>`
  * `<string.h>`
  * `<time.h>`

and

The *C POSIX Library*
  * *POSIX*.1

with those headers
  * `<cpio.h>`
  * `<dirent.h>`
  * `<fcntl.h>`
  * `<grp.h>`
  * `<netdb.h>`
  * `<pthread.h>`
  * `<pwd.h>`
  * `<spawn.h>`
  * `<sys/ipc.h>`
  * `<sys/mman.h>`
  * `<sys/msg.h>`
  * `<sys/sem.h>`
  * `<sys/stat.h>`
  * `<sys/time.h>`
  * `<sys/types.h>`
  * `<sys/utsname.h>`
  * `<sys/wait.h>`
  * `<tar.h>`
  * `<termios.h>`
  * `<unistd.h>`
  * `<utime.h>`

and some non-standard things

All that represent the *clib* or *The C Standard Library for AS3*.

<br/>

We will unlikely support 100% of C, simply because things work differently in AS3, but in general we will make our best effort to have a library that make sens to use.

<br/>

== Level of support ==

First, let's explain the basic.

This library is contained in the *C* package<br/>
and is in favour of an AS3 syntax.

in *C*
{{{
#include <stdlib.h>
#include <sys/stat.h>
}}}

in  *AS3*
{{{
import C.stdlib.*;
import C.sys.stat.*;
}}}

<br/>

Those C packages will mainly define
<br/>

*constants* and/or *macros*

{{{
package C.errno
{
    /**
     * Argument list too long.
     *
     * @langversion 3.0
     * @playerversion AVM 0.4
     */
    public const E2BIG:int = 7;
}
}}}

in some cases hardcoded for a common behaviour


{{{
package C.limits
{
    /**
     * Maximum number of bytes the implementation will store as a pathname.
     *
     * @langversion 3.0
     * @playerversion AVM 0.4
     */
    [native("::avmshell::CLimitsClass::get_PATH_MAX")]
    public native function get PATH_MAX():int;
}
}}}

sometimes dynamically fetched from the current system

<br/>

*functions*

{{{
package C.stdio
{
    /**
     * Rename a file.
     *
     * @langversion 3.0
     * @playerversion AVM 0.4
     */
    [native("::avmshell::CStdioClass::rename")]
    public native function rename( oldname:String, newname:String ):int;
}
}}}

that may or may not change the original C function signature

<br/>

*classes*

{{{
package C.stdio
{
    /**
     * A structure containing information about a file.
     *
     * <p>
     * <b>FILE</b> is a type suitable for storing information for a file stream.
     * </p>
     *
     * @langversion 3.0
     * @playerversion AVM 0.4
     */
    [native(cls="::avmshell::CStdio_FILEClass", methods="auto", construct="none")]
    public class FILE
    {
        //...
    }
}
}}}

used to replace *typedef* and/or *struct* so the C context can exchange *types* with the AS3 context

<br/>

Here a usage example

if you have this in C
{{{
typedef FILE

typedef fpos_t

FILE *fopen(const char *filename, const char *mode);

int fgetpos(FILE *stream, fpos_t *pos);
}}}

you will use it like that in AS3
{{{
import C.errno.*;
import C.stdio.*;

var file:FILE = fopen( "foobar.txt", "w" );

var pos:fpos_t = new fpos_t();
var result:int = fgetpos( file, pos );

if( result != 0 )
{
    throw new CError( errno );
}
}}}

yep, it feels like C but it is still AS3.

<br/>

The following will details which level of support we provide per header or package.


<font color="orange">*ANSI C (C89) / ISO C (C90)*</font>

=== `<assert.h>` ===
<font color="red">not implemented</font>


=== `<ctype.h>` ===
<font color="green">fully supported</font>


=== `<errno.h>` ===
<font color="green">fully supported</font>
<font color="blue">some non standard</font>

=== `<float.h>` ===
<font color="red">not supported</font>

=== `<limits.h>` ===
<font color="orange">partially supported</font>

=== `<locale.h>` ===
<font color="red">not implemented</font>

=== `<math.h>` ===
<font color="red">not implemented</font>

=== `<setjmp.h>` ===
<font color="red">not supported</font>

=== `<signal.h>` ===
<font color="red">not implemented</font>

=== `<stdarg.h>` ===
<font color="red">not supported</font>

=== `<stddef.h>` ===
<font color="red">not supported</font>

=== `<stdio.h>` ===
<font color="green">fully supported</font>

=== `<stdlib.h>` ===
<font color="green">fully supported</font>

=== `<string.h>` ===
<font color="green">fully supported</font>

=== `<time.h>` ===
<font color="red">not implemented</font>



<font color="orange">*POSIX.1*</font>
=== `<cpio.h>` ===
<font color="red">not implemented</font>

=== `<dirent.h>` ===
<font color="red">not implemented</font>

=== `<fcntl.h>` ===
<font color="red">not implemented</font>

=== `<grp.h>` ===
<font color="red">not implemented</font>

=== `<netdb.h>` ===
<font color="red">not implemented</font>

=== `<pthread.h>` ===
<font color="red">not implemented</font>

=== `<pwd.h>` ===
<font color="red">not implemented</font>

=== `<spawn.h>` ===
<font color="red">not implemented</font>

=== `<sys/ipc.h>` ===
<font color="red">not implemented</font>

=== `<sys/mman.h>` ===
<font color="red">not implemented</font>

=== `<sys/msg.h>` ===
<font color="red">not implemented</font>

=== `<sys/sem.h>` ===
<font color="red">not implemented</font>

=== `<sys/stat.h>` ===
<font color="red">not implemented</font>

=== `<sys/time.h>` ===
<font color="red">not implemented</font>

=== `<sys/types.h>` ===
<font color="red">not implemented</font>

=== `<sys/utsname.h>` ===
<font color="red">not implemented</font>

=== `<sys/wait.h>` ===
<font color="red">not implemented</font>

=== `<tar.h>` ===
<font color="red">not implemented</font>

=== `<termios.h>` ===
<font color="red">not implemented</font>

=== `<unistd.h>` ===
<font color="orange">partially supported</font>

=== `<utime.h>` ===
<font color="red">not implemented</font>