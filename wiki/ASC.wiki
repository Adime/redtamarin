#summary about the ActionScript Compiler.

=== Introduction ===

The !ActionScript Compiler, or *ASC*, is available as a component from the open source [http://opensource.adobe.com/wiki/display/flexsdk/Flex+SDK Flex SDK].

Written in Java, and distributed as a Jar file (asc.jar),<br>
it allows to compile `*.as` source code to an `*.abc` file ([ABC ActionScript Byte Code]),<br>
or to a `*.swf` file, or to an executable file.

=== Options ===

{{{
ActionScript 3.0 for AVM+
version 1.0 build cyclone
Copyright (c) 2003-2007 Adobe Systems Incorporated
Copyright (c) 1998-2003 Mountain View Compiler Company
All rights reserved

Usage:
  asc {-AS3|-ES|-d|-f|-h|-i|-import <filename>|-in <filename>|-m|-p}* filespec
  -AS3 = use the AS3 class based object model for greater performance and better error reporting
  -ES = use the ECMAScript edition 3 prototype based object model to allow dynamic overriding of prototype properties
  -d = emit debug info into the bytecode
  -f = print the flow graph to standard out
  -h = print this message
  -i = write intermediate code to the .il file
  -import <filename> = make the packages in the
       specified file available for import
  -in <filename> = include the specified filename
       (multiple -in arguments allowed)
  -m = write the avm+ assembly code to the .il file
  -p = write parse tree to the .p file
  -md = emit metadata information into the bytecode
  -warnings = warn on common actionscript mistakes
  -strict = treat undeclared variable and method access as errors
  -sanity = system-independent error/warning output -- appropriate for sanity testing
  -log = redirect all error output to a logfile
  -exe <avmplus path> = emit an EXE file (projector)
  -swf classname,width,height[,fps] = emit a SWF file
  -language = set the language for output strings {EN|FR|DE|IT|ES|JP|KR|CN|TW}
  -optimize = produced an optimized abc file
  -config ns::name=value = define a configuration value in the namespace ns
  -use <namespace> = automatically use a namespace when compiling this code
  -avmtarget <vm version number> = emit bytecode for a specific VM version, 1 is AVM1, 2 is AVM2, etc
  -api <version> = compile program as a specfic version between 660 and 670
}}}

=== Usage ===

with helloworld.as
{{{
trace( "hello world" );
}}}

a very basic usage
{{{
$ java -jar asc.jar -AS3 -import builtin.abc -import toplevel.abc helloworld.as
helloworld.abc, 127 bytes written
}}}


When you need to compile "system" libraries you will need more options
{{{
$ java -jar asc.jar -abcfuture -builtin -apiversioning -import builtin.abc
   shell_toplevel.as Domain.as ByteArray.as ...
}}}

or
{{{
$ java -ea -DAS3 -DAVMPLUS -classpath asc.jar macromedia.asc.embedding.ScriptCompiler
   -abcfuture -builtin -apiversioning -import builtin.abc -out shell_toplevel
   shell_toplevel.as Domain.as ByteArray.as ...
}}}

=== Misc. ===

In the futur we will try to provide an `asc.exe` made with redtamarin<br>
that will add the following features
 * act as a wrapper, detect if Java is installed
 * detect the `asc.jar`, if not found install or download it from the internet
 * support wildcard includes, eg. `asc -import builtin.abc src/*.as main.as`
 * etc.