#summary start here.
#labels Featured

= Introduction =

here you will find some infos on how to setup
redtamarin and use it.


= Compiling =

redtamarin is based on the [http://www.mozilla.org/projects/tamarin/ tamarin] source code
and so follow the same principle for the [http://developer.mozilla.org/en/docs/Tamarin_Build_Documentation compilation and build].

but as redtamarin source is on svn and tamarin source is on mercurial
this require a special setup.

== how to setup ==

 1. create a working directory

{{{
$ mkdir working-directory
}}}

 2. then checkout tamarin with mercurial

{{{
$ cd working-directory
$ hg clone http://hg.mozilla.org/tamarin-central tamarin-central
}}}

you should have this structure now
{{{
..
  |_ working-directory
       |_ tamarin-central
}}}

 3. also get the zlib module (needed to compile under windows)

{{{
cvs -d :pserver:anonymous:anonymous@cvs-mirror.mozilla.org:/cvsroot
 export -r HEAD mozilla/modules/zlib
}}}

copy the module to have this structure
{{{
..
  |_ modules
  |      |_ zlib
  |           |_ ...
  |
  |_ working-directory
       |_ tamarin-central
}}}

 4. then checkout redTamarin inside tamarin-central

{{{
$ cd tamarin-central
$ svn checkout http://redtamarin.googlecode.com/svn/trunk/RED/src/ red
}}}

your final structure should look like that
{{{
..
  |_ modules
  |      |_ zlib
  |           |_ ...
  |
  |_ working-directory
       |_ tamarin-central
             |_ axscript
             |_ build
             |_ codegen
             |_ core
             |_ ...
             |_ red  <- here our code from svn
}}}

== how to compile ==

for now I support only OS X and Windows
(Linux should be able to compile too but untested)

to compile under windows use
{{{
../working-directory/tamarin-central/red/platform/win32/redtamarin_8.sln
}}}

note:
this is a solution for Visual C++ Express 2008
it's what I use, maybe you'll need some tweaks to make it work with other compilers.

to compile under OS X use
{{{
../working-directory/tamarin-central/red/platform/mac/redshell/redshell.xcodeproj
}}}

it should work in any Xcode

= Testing =

Wether you compile your own redshell executable or want to run those executable

you will need another tool: the !ActionScript Compiler, or in short ASC
you can find the [http://opensource.adobe.com/wiki/display/flexsdk/Get+Source+Code source of asc.jar in the Flex SDK]

Follow [http://opensource.adobe.com/wiki/display/flexsdk/Setup their instructions to compile the Flex SDK]

this is required so you can compile *.as to *.abc
and then run the *.abc with the redshell executable

== I don't want to compile C/C++/Java, I just want to write AS code dammit ==

I hear you :)

download this zip (see [http://code.google.com/p/redtamarin/downloads/list downloads] tab), and unzip it, you should get

{{{
..
 |_ red_v0.1.0.100  <- version of redshell
      |_ bin
      |   |_ asc.jar
      |   |_ redshell     <- mac executable
      |   |_ redshell.exe <- win32 executable
      |   |_ builtin.abc
      |   |_ toplevel.abc
      |_ buildAndRun.bat  <- for Windows
      |_ buildAndRun.sh   <- for OS X
      |_ buildEXE.bat     <- for Windows
      |_ buildEXE.sh      <- for OS X


}}}

write some code in `test.as`
{{{
import avmplus.System;
import redtamarin.getRedTamarinVersion;

trace( "hello world" );

trace( "avmplus v" + System.getAvmplusVersion() );
trace( "redtamarin v" + getRedTamarinVersion() );

}}}

and then build it and run it

on OS X
{{{
$ ./buildAndRun.sh test.as
}}}

on Windows
{{{
c:\> buildAndRun.bat test.as
}}}

both will output
{{{
test.abc, 123 bytes written
hello world
avmplus v1.0 cyclone
redtamarin v0.1.0.100
}}}

the `buildAndRun` just build an *.abc using asc.jar
then run it with the redshell executable

when you're happy with your tests, 
you can then build both an OS X and Windows executable using `buildEXE` scripts

on OS X
{{{
$ ./buildEXE.sh test.as
}}}

on Windows
{{{
c:\> buildEXE.bat test.as
}}}

`test` will be the executable for OS X
(if you generate it from Windows you will need to make it executable under OS X using `chmod +x test`)

`test.exe` qill be the executable for Windows

those executables merge the redshell executable with the *.abc file
and so have no dependencies.


= IDE =

== I want code completion ==

=== using Flex Builder 3 ===

first create a workspace dedicated to this kind of project

{{{
File/Switch Workspace/Other...
}}}

Under OS X I create a "Tamarin" workspace
{{{
/code/Tamarin
}}}

Before creating any project you need to edit
a config file, in the terminal go to your workspace directory

{{{
$ cd /code/Tamarin
}}}

then go in this directory
{{{
$ pwd
/code/Tamarin
$ cd .metadata/.plugins/com.adobe.flexbuilder.codemodel/extraClassPath/
}}}

here you will see a `Global.as` file

you need to overwrite it
{{{
$ rm Global.as
$ touch Global.as
}}}

now in Flex Builder 3 create an ActionScript project

you get this structure
{{{
[projectname]
   |_ bin-debug
   |_ html-template
   |_ src
}}}

from the Downloads tab use the most recent red zip
(for ex: red_v0.1.0.102.zip) and unzip in your project
to obtain that structure

{{{
[projectname]
   |_ bin
       |_ asc.jar
       |_ builtin.abc
       |_ redshell
       |_ redhsell.exe
       |_ toplevel.abc
   |_ bin-debug
   |_ html-template
   |_ src
   |_ buildAndRun.bat
   |_ buildAndRun.sh
   |_ buildEXE.bat
   |_ buildEXE.sh
}}}

now add the redshell AS3 library

in your project create a `libs` directory

and import the library from svn

{{{
$ cd /code/Tamarin/[projectname]/libs
$ svn co http://redtamarin.googlecode.com/svn/trunk/AS3/redshell/src/ redshell
}}}

now your project structure should look like this

{{{
[projectname]
   |_ bin
       |_ asc.jar
       |_ builtin.abc
       |_ redshell
       |_ redhsell.exe
       |_ toplevel.abc
   |_ bin-debug
   |_ html-template
   |_ libs
       |_ redshell
            |_ actionscript.lang.as
            |_ Array.as
            |_ etc.
   |_ src
   |_ buildAndRun.bat
   |_ buildAndRun.sh
   |_ buildEXE.bat
   |_ buildEXE.sh
}}}

now you need to configure your project

go into the project properties

in  `ActionScript build path`

on the tab `source path` add `libs/redshell`

on the tab `library path` remove any Flex SDK SWC

in `Builders`

deselect the default `Flex`

and create your own builder, for ex `[projectname]_build`

for the `Location` use `${workspace_loc:/[projectname]/buildAndRun.sh}`

for the `Working directory` use `${workspace_loc:/[projectname]}`

for the `Arguments` use `${resource_loc}`

save

create a basic `main.as` in the `src` folder

for ex:
{{{
import C.unistd.getcwd;

trace( getcwd() );
}}}

now in Flex Builder, select the `main.as` tab
and build the project

in the console you should obtain
{{{
main.abc, 138 bytes written
/code/Tamarin/cwd_test
}}}

in this case I named my project `cwd_test`