#summary misc notes
#labels notes

= Introduction =

Tamarin is big, and while delving into it, trying to understand how things are connected together, I'll take some notes that might be helpfull for others (but mainly I write down all this for me :p).

== as types in c++ ==

[http://redtamarin.googlecode.com/svn/trunk/mozilla/js/tamarin/core/AvmCore.h AvmCore.h] define
 * OBJECT_TYPE
 * CLASS_TYPE
 * FUNCTION_TYPE
 * ARRAY_TYPE
 * STRING_TYPE
 * NUMBER_TYPE
 * INT_TYPE
 * UINT_TYPE
 * BOOLEAN_TYPE
 * VOID_TYPE
 * NULL_TYPE
 * NAMESPACE_TYPE

in many cases you want to pass an object without knowing its type
{{{
public native function test( obj:* ):String
}}}

but in the cpp you will need to test its type to avoid crash of the vm

{{{
Stringp TestClass::test(Atom obj)
{
    AvmCore* core = this->core();
    if( core->istype( obj, CLASS_TYPE ) )
    {
    ...
    }

}
}}}

== types correspondance ==

in [http://redtamarin.googlecode.com/svn/trunk/mozilla/js/tamarin/core/NativeFunction.h NativeFunction.h] you can see this info


|| AS type   || C++ type ||
|| Void      || Atom, if parameter, void if return type ||
|| Object    || Atom ||
|| Boolean   || bool ||
|| Number    || double ||
|| String    || Stringp (String `*`) ||
|| Class     || ClassClosure`*` ||
|| MovieClip || MovieClipObject`*` (similar for any other class) ||

