#summary Flash Platform APIs.

== Introduction ==

The goal is to provide compatible APIs with the Flash Player and AIR runtime,
so you can literally copy/paste code to compile for redtamarin.


=== Implemented ===

note:<br>
a *-* sign indicate a missing property from the flash platform API.<br>
a *+* indicate a property existing in redtamarin but not in the flash platform API.<br>
a *#* indicate a mock in redtamarin (the object exists but is a fake).

 * package *flash.errors*
 {{{
public dynamic class IOError;

public dynamic class EOFError;

public dynamic class IllegalOperationError;

public dynamic class MemoryError;

public dynamic class ScriptTimeoutError;

public dynamic class StackOverflowError;

-public dynamic class InvalidSWFError;

-public class SQLError;

-public class SQLErrorOperation;
 }}}

 * package *flash.events*
 {{{
#public class Event;
 #public function get bubbles():Boolean
 #public function get cancelable():Boolean
 #public function get currentTarget():Object
 #public function get eventPhase():uint
 #public function get target():Object
 #public function get type():String
 #public function clone():Event;
 #public function formatToString(className:String, ... arguments):String
 #public function isDefaultPrevented():Boolean
 #public function preventDefault():void
 #public function stopImmediatePropagation():void
 #public function stopPropagation():void
 #public function toString():String

public interface IEventDispatcher;
  function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void;
  function dispatchEvent(event:Event):Boolean;
  function hasEventListener(type:String):Boolean;
  function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void;
  function willTrigger(type:String):Boolean;

#public class EventDispatcher implements IEventDispatcher;
 #public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void;
 #public function dispatchEvent(event:Event):Boolean;
 #public function hasEventListener(type:String):Boolean;
 #public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void;
 #public function willTrigger(type:String):Boolean;
 }}}

 * package *flash.display*
 {{{
#public class DisplayObject extends EventDispatcher;

#public class InteractiveObject extends DisplayObject;

#public class DisplayObjectContainer extends InteractiveObject;

#public class Stage extends DisplayObjectContainer;

#public class Sprite extends DisplayObjectContainer;

#public class Shape extends DisplayObject;
 }}}

 * package *flash.utils*
 {{{
-public function clearInterval(id:uint):void;
-public function clearTimeout(id:uint):void;
public function describeType(value:*):XML;
-public function escapeMultiByte(value:String):String;
public function getDefinitionByName(name:String):Object;
public function getQualifiedClassName(value:*):String;
public function getQualifiedSuperclassName(value:*):String;
public function getTimer():int;
-public function setInterval(closure:Function, delay:Number, ... arguments):uint;
-public function setTimeout(closure:Function, delay:Number, ... arguments):uint;
-public function unescapeMultiByte(value:String):String;

#public namespace flash_proxy;

public class ByteArray;
  public native function get bytesAvailable():uint;
 -public static function get defaultObjectEncoding():uint;
 -public function set defaultObjectEncoding(value:uint):void;
  public native function get endian():String;
  public native function set endian(type:String):void;
  public native function get length():uint;
  public native function set length(value:uint):void;
 -public function get objectEncoding():uint;
 -public function set objectEncoding(value:uint):void;
  public native function get position():uint;
  public native function set position(offset:uint):void;
 -public function clear():void;
  public function compress():void;
 -public function deflate():void;
 -public function inflate():void;
  public native function readBoolean():Boolean;
  public native function readByte():int;
  public native function readBytes(bytes:ByteArray,offset:uint=0,length:uint=0):void;
  public native function readDouble():Number;
  public native function readFloat():Number;
  public native function readInt():int;
 -public function readMultiByte(length:uint, charSet:String):String;
 -public function readObject():*;
  public native function readShort():int;
  public native function readUnsignedByte():uint;
  public native function readUnsignedInt():uint;
  public native function readUnsignedShort():uint;
  public native function readUTF():String;
  public native function readUTFBytes(length:uint):String;
  public function toString():String;
  public function uncompress():void;
  public native function writeBoolean(value:Boolean):void;
  public native function writeByte(value:int):void;
 -public function writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0):void;
  public native function writeDouble(value:Number):void;
  public native function writeFloat(value:Number):void;
  public native function writeInt(value:int):void;
 -public function writeMultiByte(value:String, charSet:String):void;
 -public function writeObject(object:*):void;
  public native function writeShort(value:int):void;
  public native function writeUnsignedInt(value:uint):void;
  public native function writeUTF(value:String):void;
  public native function writeUTFBytes(value:String):void;
 +public native static function readFile(filename:String):ByteArray;
 +public native function writeFile(filename:String):void;

-public final class CompressionAlgorithm;

dynamic public class Dictionary;

public class Endian;
  public static const BIG_ENDIAN:String
  public static const LITTLE_ENDIAN:String

-public interface IDataInput;

-public interface IDataOutput;

-public interface IExternalizable;

#public class Proxy;
 #flash_proxy function callProperty(name:*, ... rest):*;
 #flash_proxy function deleteProperty(name:*):Boolean;
 #flash_proxy function getDescendants(name:*):*;
 #flash_proxy function getProperty(name:*):*;
 #flash_proxy function hasProperty(name:*):Boolean;
 #flash_proxy function isAttribute(name:*):Boolean;
 #flash_proxy function nextName(index:int):String;
 #flash_proxy function nextNameIndex(index:int):int;
 #flash_proxy function nextValue(index:int):*;
 #flash_proxy function setProperty(name:*, value:*):void

-public class Timer;
 }}}

 * package *flash.system*
 {{{
-public function fscommand(command:String, args:String = ""):void;

public final class ApplicationDomain;
  public static function get currentDomain():ApplicationDomain;
  public function get domainMemory():ByteArray;
  public function set domainMemory( value:ByteArray ):void;
  public static function get MIN_DOMAIN_MEMORY_LENGTH():uint;
  public function get parentDomain():ApplicationDomain;
  public function getDefinition( name:String ):Object;
  public function hasDefinition( name:String ):Boolean;

public final class Capabilities;
  public static function get avHardwareDisable():Boolean;
  public static function get hasAccessibility():Boolean;
  public static function get hasAudio():Boolean;
  public static function get hasAudioEncoder():Boolean;
  public static function get hasEmbeddedVideo():Boolean;
  public static function get hasIME():Boolean;
  public static function get hasMP3():Boolean;
  public static function get hasPrinting():Boolean;
  public static function get hasScreenBroadcast():Boolean;
  public static function get hasScreenPlayback():Boolean;
  public static function get hasStreamingAudio():Boolean;
  public static function get hasTLS():Boolean;
  public static function get hasVideoEncoder():Boolean;
  public static function get isDebugger():Boolean;
  public static function get isEmbeddedInAcrobat():Boolean;
  public static function get language():String;
  public static function get languages():Array;
  public static function get localFileReadDisable():Boolean;
  public static function get manufacturer():String;
  public static function get maxLevelIDC():String;
  public static function get os():String;
  public static function get pixelAspectRatio():Number;
  public static function get playerType():String;
  public static function get screenColor():String;
  public static function get screenDPI():Number;
  public static function get screenResolutionX():Number;
  public static function get screenResolutionY():Number;
  public static function get serverString():String;
  public static function get version():String;

-public final class IME;

-public final class IMEConversionMode;

-public class JPEGLoaderContext;

-public class LoaderContext;

-public final class Security;

-public class SecurityDomain;

-public final class SecurityPanel;

public final class System;
 -public static function get ime():IME;
  public static function get totalMemory():uint;
 -public static function get useCodePage():Boolean;
 -public function set useCodePage(value:Boolean):void;
  public static function get vmVersion():String;
  public static function exit( code:uint ):void;
  public static function gc():void;
 -public static function pause():void;
 -public static function resume():void;
 -public static function setClipboard(string:String):void;
 }}}