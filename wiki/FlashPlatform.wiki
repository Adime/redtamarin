#summary Flash Platform APIs.

== Introduction ==

The goal is to provide compatible APIs with the Flash Player and AIR runtime,
so you can literally copy/paste code to compile for redtamarin.


=== Implemented ===

note:<br>
a minus sign `-` indicate a missing property from the flash platform API.<br>
a plus sign `+` indicate a property existing in redtamarin but not in the flash platform API.

 * package *flash.errors*
 {{{
public dynamic class IOError;
public dynamic class EOFError;
public dynamic class IllegalOperationError;
public dynamic class MemoryError;
public dynamic class ScriptTimeoutError;
public dynamic class StackOverflowError;
 }}}

 * package *flash.utils*
 {{{
-public function clearInterval(id:uint):void;
-public function clearTimeout(id:uint):void;
public function describeType(value:*):XML;
-public function escapeMultiByte(value:String):String;
public function getDefinitionByName(name:String):Object;
public function getQualifiedClassName(value:*):String;
public function getQualifiedSuperclassName(value:*):String;
public function getTimer():int;
-public function setInterval(closure:Function, delay:Number, ... arguments):uint;
-public function setTimeout(closure:Function, delay:Number, ... arguments):uint;
-public function unescapeMultiByte(value:String):String;

public class ByteArray;
  public native function get bytesAvailable():uint;
 -public static function get defaultObjectEncoding():uint;
 -public function set defaultObjectEncoding(value:uint):void;
  public native function get endian():String;
  public native function set endian(type:String):void;
  public native function get length():uint;
  public native function set length(value:uint):void;
 -public function get objectEncoding():uint;
 -public function set objectEncoding(value:uint):void;
  public native function get position():uint;
  public native function set position(offset:uint):void;
 -public function clear():void;
  public function compress():void;
 -public function deflate():void;
 -public function inflate():void;
  public native function readBoolean():Boolean;
  public native function readByte():int;
  public native function readBytes(bytes:ByteArray,offset:uint=0,			length:uint=0):void;
  public native function readDouble():Number;
  public native function readFloat():Number;
  public native function readInt():int;
 -public function readMultiByte(length:uint, charSet:String):String;
 -public function readObject():*;
  public native function readShort():int;
  public native function readUnsignedByte():uint;
  public native function readUnsignedInt():uint;
  public native function readUnsignedShort():uint;
  public native function readUTF():String;
  public native function readUTFBytes(length:uint):String;
  public function toString():String;
  public function uncompress():void;
  public native function writeBoolean(value:Boolean):void;
  public native function writeByte(value:int):void;
 -public function writeBytes(bytes:ByteArray, offset:uint = 0, length:uint = 0):void;
  public native function writeDouble(value:Number):void;
  public native function writeFloat(value:Number):void;
  public native function writeInt(value:int):void;
 -public function writeMultiByte(value:String, charSet:String):void;
 -public function writeObject(object:*):void;
  public native function writeShort(value:int):void;
  public native function writeUnsignedInt(value:uint):void;
  public native function writeUTF(value:String):void;
  public native function writeUTFBytes(value:String):void;
 +public native static function readFile(filename:String):ByteArray;
 +public native function writeFile(filename:String):void;

-public final class CompressionAlgorithm;

dynamic public class Dictionary;

public class Endian;
  public static const BIG_ENDIAN:String
  public static const LITTLE_ENDIAN:String

-public interface IDataInput;

-public interface IDataOutput;

-public interface IExternalizable;

-public class Proxy;

-public class Timer;

 }}}

 * package *flash.system*
 {{{
public final class System;
  public static function get totalMemory():uint;
  public static function get vmVersion():String;
  public static function exit( code:uint ):void;
  public static function gc():void;
 }}}