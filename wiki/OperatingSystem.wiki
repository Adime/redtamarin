#summary AVMPlus Operating System class.

<wiki:comment>
Here we can use asdoc to document the source code.
So the rule is to document the side notes in the wiki page.

/* more in depth informations: http://code.google.com/p/redtamarin/wiki/OperatingSystem */
</wiki:comment>

= About =
Provides informations about the Operating System.

*class:* {{{avmplus::OperatingSystem}}}

*product:* redtamarin 0.3

*since:* 0.3.0


= Properties =

== name ==
{{{
public static function get name():String
}}}
The OS kernel name.

*note:*<br>
Returns the `sysname` property from `uname()`.

*since:* 0.3.0


== username ==
{{{
public static function get username():String
}}}
The current user name logged in the OS.

*note:*<br>
The same as using `getlogin()` from [C_unistd C.unistd].

*since:* 0.3.0


== nodename ==
{{{
public static function get nodename():String
}}}
Name of this node on the network.

*note:*<br>
Returns the `nodename` property from `uname()`.

*since:* 0.3.0



== hostname ==
{{{
public static function get hostname():String
}}}
The host name of the local computer.

*note:*<br>
The same as using `gethostname()` from [C_unistd C.unistd].<br>
The `nodename` and `hostname` are in general the same<br>
but depending on the OS configuration could be different (hence two different properties).

*since:* 0.3.0



== release ==
{{{
public static function get release():String
}}}
Current release level of the OS.

*note:*<br>
Returns the `release` property from `uname()`.

*since:* 0.3.0



== version ==
{{{
public static function get version():String
}}}
Current version level of this release of the OS.

*note:*<br>
Returns the `version` property from `uname()`.

*since:* 0.3.0



== machine ==
{{{
public static function get machine():String
}}}
Name of the hardware type the system is running on.

*note:*<br>
Returns the `machine` property from `uname()`.

*since:* 0.3.0



== vendor ==
{{{
public static function get vendor():String
}}}
Name of the vendor (commercial) or distributor (non-commercial) of this OS.

*note:*<br>
Can returns "Microsoft", "Apple", "Linux", etc.

*since:* 0.3.0



== vendorName ==
{{{
public static function get vendorName():String
}}}
Name of the OS provided by the vendor/distributor.

*note:*<br>
Can returns "Mac OS X", "Ubuntu", "Windows", "Windows 95", "Windows 98",<br>
"Windows ME", "Windows NT", "Windows XP", "Windows 2000", "Windows Vista",<br>
"Windows 7", "Windows Server 2003", "Windows Server 2003 `R2`",<br>
"Windows Server 2008", "Windows Server 2008 `R2`", etc.

*since:* 0.3.0


== vendorVersion ==
{{{
public static function get vendorVersion():String
}}}
Version of the OS provided by the vendor/distributor.

*note:*<br>
Each vendors have their own logic so this version number "format" can vary a lot,<br>
<br>
for OS X it can returns "10.1", "10.5.2", "10.6.1", etc.<br>
<br>
for Windows it can returns "3.1", "4", "5.0", "5.1", "6.0", etc.<br>
also for Windows, the bugfix number is the major service pack number, 0 if no service pack<br>
example:<br>
Windows XP Professional Service Pack 3<br>
would return "5.1.3"<br>
<br>
for Ubuntu it can returns "8.04", etc.

*since:* 0.3.0


== vendorDescription ==
{{{
public static function get vendorDescription():String
}}}
Description of the OS provided by the vendor/distributor,<br>
or the empty string if not defined.

*note:*<br>
Again each vendors have their own logic so we tried to "standardize" a format<br>
{{{
{Vendor} {VendorName} {VendorVersion} [desc. or version] ({CodeName} [version] {build})
}}}
for Windows you will get something like "Microsoft Windows 7 Home Premium (Vienna 6.1 build 2600)"<br>
<br>
for OS X you will get something like "Apple Mac OS X 10.5.1 (Leopard build 9B18)"<br>
<br>
for Ubuntu you will get something like "Linux Ubuntu 8.04.4 LTS (hardy)"

*since:* 0.3.0


== codeName ==
{{{
public static function get codeName():String
}}}
Codename of this OS, or "Unknown" if not defined.

*note:*<br>
for Windows can returns "Detroit", "Chicago", "Memphis", "Whistler", "Memphis NT",<br>
"Longhorn", "Longhorn Server", "Vienna", etc.<br>
<br>
for OS X can returns "Cheetah", "Puma", "Jaguar", "Panther", "Tiger", "Leopard", "Snow Leopard", etc.<br>
<br>
for Ubuntu can returns "hardy", etc.

*since:* 0.3.0


== name ==
{{{
public function get name():String
}}}
Definition.

*since:* 0.3.0


== name ==
{{{
public function get name():String
}}}
Definition.

*since:* 0.3.0


= Methods =

== test ==
{{{
public function test():void
}}}
Definition test.

*since:* 0.3.0

----