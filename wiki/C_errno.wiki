#summary errno.h for AS3.

<wiki:comment>
Because we are defining libraries for Tamarin we can not really use asdoc to document the source code.
So the rule is to document everything in the wiki page.
Yeah it sucks because we have to sync by hand, we'll try to automate it later.

on the source code file, we use only one comment

/* documentation: http://code.google.com/p/redtamarin/wiki/C_errno */
</wiki:comment>

= About =
System error numbers.

*package:* {{{C.errno.*}}}

*product:* redtamarin 0.3

*since:* 0.3.0

*references:*
 * http://www.dinkumware.com/manuals/default.aspx?manual=compleat&page=errno.html
 * http://en.wikipedia.org/wiki/Errno.h

----
= Constants =

== General errors ==
|| *EDOM* || Numerical argument out of domain. ||
|| *EILSEQ* || Illegal byte sequence. ||
|| *ERANGE* || Result too large. ||

*since:* 0.3.0


== POSIX Additional errors ==
|| *EPERM* || Operation not permitted. ||
|| *ENOENT* || No such file or directory. ||
|| *ESRCH* || No such process. ||
|| *EINTR* || Interrupted system call. ||
|| *EIO* || Input/output error. ||
|| *ENXIO* || Device not configured. ||
|| *E2BIG* || Argument list too long. ||
|| *ENOEXEC* || Exec format error. ||
|| *EBADF* || Bad file descriptor. ||
|| *ECHILD* || No child processes. ||
|| *EAGAIN* || Resource temporarily unavailable. ||
|| *ENOMEM* || Cannot allocate memory. ||
|| *EACCES* || Permission denied. ||
|| *EFAULT* || Bad address. ||
|| *EBUSY* || Device / Resource busy. ||
|| *EEXIST* || File exists. ||
|| *EXDEV* || Cross-device link. ||
|| *ENODEV* || Operation not supported by device. ||
|| *ENOTDIR* || Not a directory. ||
|| *EISDIR* || Is a directory. ||
|| *EINVAL* || Invalid argument. ||
|| *ENFILE* || Too many open files in system. ||
|| *EMFILE* || Too many open files. ||
|| *ENOTTY* || Inappropriate ioctl for device. ||
|| *EFBIG* || File too large. ||
|| *ENOSPC* || No space left on device. ||
|| *ESPIPE* || Illegal seek. ||
|| *EROFS* || Read-only file system. ||
|| *EMLINK* || Too many links. ||
|| *EPIPE* || Broken pipe. ||
|| *EDEADLK* || Resource deadlock avoided. ||
|| *ENAMETOOLONG* || File name too long. ||
|| *ENOLCK* || No locks available. ||
|| *ENOSYS* || Function not implemented. ||
|| *ENOTEMPTY* || Directory not empty. ||

*since:* 0.3.0

== Socket errors ==

|| *EWOULDBLOCK* || Network is down. ||
|| *EINPROGRESS* || Network is down. ||
|| *EALREADY* || Network is down. ||
|| *EDESTADDRREQ* || Network is down. ||
|| *EMSGSIZE* || Network is down. ||
|| *EPROTOTYPE* || Network is down. ||
|| *ENOPROTOOPT* || Network is down. ||
|| *EADDRINUSE* || Network is down. ||
|| *EADDRNOTAVAIL* || Network is down. ||
*since:* 0.3.2

|| *ENETDOWN* || Network is down. ||
|| *ENETUNREACH* || Network is unreachable. ||
|| *ENETRESET* || Network dropped connection on reset. ||
|| *ECONNABORTED* || Software caused connection abort. ||
|| *ECONNRESET* || Connection reset by peer. ||
|| *ENOBUFS* || No buffer space available. ||
|| *EISCONN* || Socket is already connected. ||
|| *ENOTCONN* || Socket is not connected. ||
|| *ESHUTDOWN* || Can't send after socket shutdown. ||
|| *ETOOMANYREFS* || Too many references: can't splice. ||
|| *ETIMEDOUT* || Operation timed out. ||
|| *ECONNREFUSED* || Connection refused. ||

*since:* 0.3.0

|| *ELOOP* || Network is down. ||
|| *EHOSTDOWN* || Network is down. ||
|| *EHOSTUNREACH* || Network is down. ||
*since:* 0.3.2


----
= Functions =

== errno ==
{{{
public function get errno():int
public function set errno( value:int ):void
}}}
Error return value.

Designates an object that is assigned a value greater than zero on certain library errors.

*example:* basic usage
{{{
import C.errno.*;
import C.string.*;
import avmplus.FileSystem;

var filename:String = "dummy_file";

if( !FileSystem.exists( filename ) )
{
     trace( "errno = " + errno ); //errno = 2
     trace( strerror( errno ) );  //No such file or directory
}
}}}

*note:*<br>
the system will not reset the error number for you<br>
for each `errno` you catch you will have to reset it<br>
`errno = 0`.

*since:* 0.3.0


== getErrno ==
{{{
public function get errno():int
}}}
Function to get the Error value.

*note:*<br>
In some strange case `errno` as a getter/setter does not work<br>
so this function can be used as an alternative.

*since:* 0.3.2


== setErrno ==
{{{
public function setErrno( value:int ):void
}}}
Function to set the Error value.

*note:*<br>
In some strange case `errno` as a getter/setter does not work<br>
so this function can be used as an alternative.

*since:* 0.3.2


----