#summary errno.h for AS3.

= Implementation =

*Errno.h* is a special case

in itself the implementation is not hard as this header define mainly a list of constants

but the problem is that those constants vary depending on the systems,<br>
there are huge difference in WIN32 vs POSIX.

System Error Codes
*equivalence table*
|| *Number* || *Linux (errno.h)* || *Windows (errno.h)* || *(comment)* ||
|| 1 || EPERM || EPERM ||  ||
|| 2 || ENOENT || ENOENT ||  ||
|| 3 || ESRCH || ESRCH ||  ||
|| 4 || EINTR || EINTR ||  ||
|| 5 || EIO || EIO ||  ||
|| 6 || ENXIO || ENXIO ||  ||
|| 7 || E2BIG || E2BIG ||  ||
|| 8 || ENOEXEC || ENOEXEC ||  ||
|| 9 || EBADF || EBADF ||  ||
|| 10 || ECHILD || ECHILD ||  ||
|| 11 || EAGAIN || EAGAIN ||  ||
|| 12 || ENOMEM || ENOMEM ||  ||
|| 13 || EACCES || EACCES ||  ||
|| 14 || EFAULT || EFAULT ||  ||
|| 15 || ENOTBLK ||  || missing ||
|| 16 || EBUSY || EBUSY ||  ||
|| 17 || EEXIST || EEXIST ||  ||
|| 18 || EXDEV || EXDEV ||  ||
|| 19 || ENODEV || ENODEV ||  ||
|| 20 || ENOTDIR || ENOTDIR ||  ||
|| 21 || EISDIR || EISDIR ||  ||
|| 22 || EINVAL || EINVAL || Secure CRT only ||
|| 23 || ENFILE || ENFILE ||  ||
|| 24 || EMFILE || EMFILE ||  ||
|| 25 || ENOTTY || ENOTTY ||  ||
|| 26 || ETXTBSY ||  || missing ||
|| 27 || EFBIG || EFBIG ||  ||
|| 28 || ENOSPC || ENOSPC ||  ||
|| 29 || ESPIPE || ESPIPE ||  ||
|| 30 || EROFS || EROFS ||  ||
|| 31 || EMLINK || EMLINK ||  ||
|| 32 || EPIPE || EPIPE ||  ||
|| 33 || EDOM || EDOM ||  ||
|| 34 || ERANGE || ERANGE || Secure CRT only ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 40 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 1 || EPERM ||  ||  ||
|| 50 || EPERM ||  ||  ||



*references:*
 * http://www.dinkumware.com/manuals/default.aspx?manual=compleat&page=errno.html
 * http://en.wikipedia.org/wiki/Errno.h
 * [http://msdn.microsoft.com/en-GB/library/5814770t(v=vs.90).aspx errno Constants (VS2008)]
 * [http://msdn.microsoft.com/en-GB/library/5814770t(v=vs.100).aspx errno Constants (VS2010)]
 * [http://msdn.microsoft.com/en-us/library/windows/desktop/ms737828(v=vs.85).aspx Error Codes - errno, h_errno and WSAGetLastError]
 * [http://msdn.microsoft.com/en-us/library/windows/desktop/ms681381(v=vs.85).aspx System Error Codes]

= About =
System error numbers.

*package:* {{{C.errno.*}}}

*product:* redtamarin 0.3

*since:* 0.3.0

*references:*
 * http://www.dinkumware.com/manuals/default.aspx?manual=compleat&page=errno.html
 * http://en.wikipedia.org/wiki/Errno.h

----
= Constants =

== General errors ==
|| *EDOM* || Numerical argument out of domain. ||
|| *EILSEQ* || Illegal byte sequence. ||
|| *ERANGE* || Result too large. ||

*since:* 0.3.0


== POSIX Additional errors ==
|| *EPERM* || Operation not permitted. ||
|| *ENOENT* || No such file or directory. ||
|| *ESRCH* || No such process. ||
|| *EINTR* || Interrupted system call. ||
|| *EIO* || Input/output error. ||
|| *ENXIO* || Device not configured. ||
|| *E2BIG* || Argument list too long. ||
|| *ENOEXEC* || Exec format error. ||
|| *EBADF* || Bad file descriptor. ||
|| *ECHILD* || No child processes. ||
|| *EAGAIN* || Resource temporarily unavailable. ||
|| *ENOMEM* || Cannot allocate memory. ||
|| *EACCES* || Permission denied. ||
|| *EFAULT* || Bad address. ||
|| *EBUSY* || Device / Resource busy. ||
|| *EEXIST* || File exists. ||
|| *EXDEV* || Cross-device link. ||
|| *ENODEV* || Operation not supported by device. ||
|| *ENOTDIR* || Not a directory. ||
|| *EISDIR* || Is a directory. ||
|| *EINVAL* || Invalid argument. ||
|| *ENFILE* || Too many open files in system. ||
|| *EMFILE* || Too many open files. ||
|| *ENOTTY* || Inappropriate ioctl for device. ||
|| *EFBIG* || File too large. ||
|| *ENOSPC* || No space left on device. ||
|| *ESPIPE* || Illegal seek. ||
|| *EROFS* || Read-only file system. ||
|| *EMLINK* || Too many links. ||
|| *EPIPE* || Broken pipe. ||
|| *EDEADLK* || Resource deadlock avoided. ||
|| *ENAMETOOLONG* || File name too long. ||
|| *ENOLCK* || No locks available. ||
|| *ENOSYS* || Function not implemented. ||
|| *ENOTEMPTY* || Directory not empty. ||

*since:* 0.3.0

== Socket errors ==

|| *EWOULDBLOCK* || Operation would block. ||
|| *EINPROGRESS* || Operation now in progress. ||
|| *EALREADY* || Operation already in progress. ||
|| *EDESTADDRREQ* || Destination address required. ||
|| *EMSGSIZE* || Message too long. ||
|| *EPROTOTYPE* || Protocol wrong type for socket. ||
|| *ENOPROTOOPT* || Bad protocol option. ||
|| *EADDRINUSE* || Address already in use. ||
|| *EADDRNOTAVAIL* || Can't assign requested address. ||

*since:* 0.3.2

|| *ENETDOWN* || Network is down. ||
|| *ENETUNREACH* || Network is unreachable. ||
|| *ENETRESET* || Network dropped connection on reset. ||
|| *ECONNABORTED* || Software caused connection abort. ||
|| *ECONNRESET* || Connection reset by peer. ||
|| *ENOBUFS* || No buffer space available. ||
|| *EISCONN* || Socket is already connected. ||
|| *ENOTCONN* || Socket is not connected. ||
|| *ESHUTDOWN* || Can't send after socket shutdown. ||
|| *ETOOMANYREFS* || Too many references: can't splice. ||
|| *ETIMEDOUT* || Operation timed out. ||
|| *ECONNREFUSED* || Connection refused. ||

*since:* 0.3.0

|| *ELOOP* || Too many levels of symbolic links. ||
|| *EHOSTDOWN* || Host is down. ||
|| *EHOSTUNREACH* || No Route to Host. ||

*since:* 0.3.2


----
= Functions =

== errno ==
{{{
public function get errno():int
public function set errno( value:int ):void
}}}
Error return value.

Designates an object that is assigned a value greater than zero on certain library errors.

*example:* basic usage
{{{
import C.errno.*;
import C.string.*;
import avmplus.FileSystem;

var filename:String = "dummy_file";

if( !FileSystem.exists( filename ) )
{
     trace( "errno = " + errno ); //errno = 2
     trace( strerror( errno ) );  //No such file or directory
}
}}}

*note:*<br>
the system will not reset the error number for you<br>
for each `errno` you catch you will have to reset it<br>
`errno = 0`.

*since:* 0.3.0


== getErrno ==
{{{
public function get errno():int
}}}
Function to get the Error value.

*note:*<br>
In some strange case `errno` as a getter/setter does not work<br>
so this function can be used as an alternative.

*since:* 0.3.2


== setErrno ==
{{{
public function setErrno( value:int ):void
}}}
Function to set the Error value.

*note:*<br>
In some strange case `errno` as a getter/setter does not work<br>
so this function can be used as an alternative.

*since:* 0.3.2


----