#summary HOWTO Build.

=== Introduction ===

Basically we follow the same process than Tamarin<br>
see [https://developer.mozilla.org/En/Tamarin/Tamarin_Build_Documentation Tamarin Build Documentation].

But we got all that wrapped up in a nice Ant build to automate a couple of things.

=== Dependencies ===

 * you need a 64bit Operating System to build everything<br>the build will work on a 32bit system but you will noo be able to build 64bit targets,<br>nor the SDK (as it requires both 32bit and 64bit targets), etc.
 * you need Python 2.6+
 * you need Ant 1.8+
 * see [Coders] for the special requirements on OS X / Linux / Windows

=== Usage ===

=== Versioning and Tag ===

We have changed the way we use the "build number"

before we could use
{{{
version = major . minor . build . revision
}}}

now we use only
{{{
version = major . minor
}}}

and we use a tag
{{{
tag = serie | cycle | build
}}}

for example:
{{{
redtamarin-0.4-1R086
}}}

that's redtamarin
  * *version* 0.4
  * *serie* 1
  * *cycle* R
  * *build* 086


here the basic rules
  * each time you build, the build number increase to a maximum of *999*
  * if the build reach *999* then we reset it to *000* and increase the *cycle* to the next letter
  * if the cycle reach *Z* then we reset the cycle to the letter *A* and increase the *serie*

here what you could get
{{{
0.4-1R086
0.4-1R087
0.4-1R088
0.4-1R089
...
0.4-1R999
0.4-1S000
0.4-1S001
0.4-1S002
0.4-1S003
...
0.4-1S999
0.4-1T000
0.4-1U000
0.4-1V000
...
0.4-1Z000
...
0.4-2A000
0.4-2B000
...
etc.
}}}

we consider the version and the tag independent of each other<br>
after a suffisant amount of features we could decide to increase the *serie* and/or the *cycle* to create new tag<br>
after another suffisant amount of features we could decide to increase the version number instead.


*Why ?*

from v0.4 to reach v1.0 we want an "agile" way to tag our releases
  * we don't want a v0.23
  * v0.9 will be right before v1.0
  * but we know we can not reach v1.0 in only 7 releases
  * we gonna need many more "intermediary" releases
  * the tag is just here to show if you are "before" or "after"<br>eg. *X* is newer than *R*<br>and *3F* is newer than *1X*
  * you can technically build 25974 times per *serie*
  * when you build on different OS it's easier to use a tag than a build or revision number<br>eg. wether you are on OSX/Linux/Windows that's the same tag for everyone

=== How to Build the SDK ===

1. build all the binaries under windows
{{{
build.32bit = true
build.64bit = true
build.release = true
build.debug = true
build.debugger = true
}}}

copy *bin-release/windows* to a shared drive


2. build all the binaries under linux
{{{
build.32bit = true
build.64bit = true
build.release = true
build.debug = true
build.debugger = true
}}}

copy *bin-release/linux* to a shared drive

3. under OS X<br>
add the windows and linux binaries in your *bin-release* folder

4. enable all the options to *true*
{{{
build.32bit = true
build.64bit = true
build.release = true
build.debug = true
build.debugger = true
build.documentation = true
build.components = true
build.sdk = true
}}}

5. run the build

here what will happen

after all the darwin binaries have been generated<br>
your *bin-release* folder will look like that
{{{
bin-release/
├── darwin
│   ├── 32
│   │   ├── debug
│   │   │   └── redshell_d
│   │   ├── debugger
│   │   │   └── redshell_dd
│   │   └── release
│   │       └── redshell
│   └── 64
│       ├── debug
│       │   └── redshell_d
│       ├── debugger
│       │   └── redshell_dd
│       └── release
│           └── redshell
├── linux
│   ├── 32
│   │   ├── debug
│   │   │   └── redshell_d
│   │   ├── debugger
│   │   │   └── redshell_dd
│   │   └── release
│   │       └── redshell
│   └── 64
│       ├── debug
│       │   └── redshell_d
│       ├── debugger
│       │   └── redshell_dd
│       └── release
│           └── redshell
└── windows
    ├── 32
    │   ├── debug
    │   │   └── redshell_d.exe
    │   ├── debugger
    │   │   └── redshell_dd.exe
    │   └── release
    │       └── redshell.exe
    └── 64
        ├── debug
        │   └── redshell_d.exe
        ├── debugger
        │   └── redshell_dd.exe
        └── release
            └── redshell.exe
}}}

after that you will also have the *documentation* and *components*
{{{
bin-release/
├── components
├── darwin
├── documentation
├── linux
└── windows

}}}

then the SDK build will bundle everything in the *bin-deploy* folder
{{{
bin-deploy/
└── redtamarin-0.4-1R086
}}}

and you will obtain a zip file<br>
*redtamarin-0.4-1R086.zip*


=== Documentation ===

==== building binaries ====

*build.32bit* = `true/false`<br>
to build all the 32bit targets

*build.64bit* = `true/false`<br>
to build all the 64bit targets

*build.release* = `true/false`<br>
to build all the release targets

*build.debug* = `true/false`<br>
to build all the debug targets

*build.debugger* = `true/false`<br>
to build all the debug debugger targets

*_options:_*

*build.cleanGenerated* = `true/false`<br>
to regenerate all the tracers, the builtin abc/h/cpp, the shell_toplevel abc/h/cpp<br>
it will define the environment variable *AVMSHELL_TOOL* for you<br>
and assign one of the precompiled avmshell exe to it.


*NOTE:*<br>
setting all to true will build 6 binaries<br>
and can take quite some time (depending on the system ressources)<br>
(a good 30mn/1h/2h/etc....)

If for example you just need to compile locally to test some stuff<br>
you don't need all options set to true, you could for ex<br>
{{{
build.32bit = true
build.64bit = false
build.release = false
build.debug = true
build.debugger = false
}}}
this will build a single binary (debug 32bit).


==== building documentation ====

==== building components ====

==== building SDK ====

*build.sdk* = `true/false`<br>
to build and bundle the SDK for redistribution

*_options:_*

*build.cleanBeforeDeploy* = `true/false`<br>
to delete the "deploy" directory before generating the SDK files.
{{{
#if you set it to false and generate multiple times the SDK

#you will either merge the files in the same folder

bin-deploy/
└── redtamarin-0.4

#or if you will create a new folder each time

bin-deploy/
└── redtamarin-0.4-1R086
└── redtamarin-0.4-1R087
└── redtamarin-0.4-1R088
└── redtamarin-0.4-1R089
└── etc.

}}}

*build.bundleSDK* = `true/false`<br>
to bundle only the SDK files without trying to compile them first.
{{{
# compiling all the exe on a particular system can take 30mn or so
# and if you have already created the binaries you just want to bundle them
# without spending yet another 30mn recompiling them

#with this option enabled

#the SDK will take the files from

bin-release/
├── components
├── darwin
├── documentation
├── linux
└── windows

#and bundle them into

bin-deploy/
└── redtamarin-0.4

#which take about 2sec ;)
}}}

*build.tagSDK* = `true/false`<br>
to add the build tag to the SDK name
{{{
# the difference between obtaining

bin-deploy/
└── redtamarin-0.4

#or

bin-deploy/
└── redtamarin-0.4-1R086
}}}

*build.mergeRuntimesInSDK* = `true/false`<br>
to merge different precompiled redshell exe into the files fo the SDK
  * todo
  * detail



=== Tamarin ===

If you want to build it "old school" without our ant build<br>
the Tamarin build is based on python scripts and make files

you need to understand *configure.py*
{{{
$ configure.py --help
--enable-abc-interp                 [=not enabled]
--enable-allocation-sampler         [=not enabled]
--enable-aot                        [=not enabled]
--enable-arm-fpu                    [=not enabled]
--enable-arm-hard-float             [=not enabled]
--enable-arm-neon                   [=not enabled]
--enable-arm-thumb                  [=not enabled]
--enable-buffer-guard               [=not enabled]
--enable-cache-gqcn                 [=not enabled]
--enable-compilepolicy              [=not enabled]
--enable-cpp -exceptions             [=not enabled]
--enable-debug                      [=not enabled]
--enable-debugger                   [=not enabled]
--enable-debugger-stub              [=not enabled]
--enable-epoc-emulator              [=not enabled]
--enable-eval                       [=not enabled]
--enable-exact-tracing              [=not enabled]
--enable-float                      [=not enabled]
--enable-halfmoon                   [=not enabled]
--enable-heap-alloca                [=not enabled]
--enable-heap-graph                 [=not enabled]
--enable-interior-pointers          [=not enabled]
--enable-interrupt-safepoint-poll   [=not enabled]
--enable-jit                        [=not enabled]
--enable-lzma-lib                   [=not enabled]
--enable-memory-profiler            [=not enabled]
--enable-methodenv-impl32           [=enabled]
--enable-mmgc-interior-pointers     [=not enabled]
--enable-mmgc-shared                [=not enabled]
--enable-optimize                   [=not enabled]
--enable-osr                        [=not enabled]
--enable-override-global-new        [=not enabled]
--enable-perfm                      [=not enabled]
--enable-protect-jitmem             [=not enabled]
--enable-safepoints                 [=not enabled]
--enable-selectable-exact-tracing   [=not enabled]
--enable-selftest                   [=not enabled]
--enable-shared-gcheap              [=not enabled]
--enable-shark                      [=not enabled]
--enable-shell                      [=enabled]
--enable-sin-cos-nonfinite          [=not enabled]
--enable-swf12                      [=not enabled]
--enable-swf13                      [=not enabled]
--enable-swf14                      [=not enabled]
--enable-swf15                      [=not enabled]
--enable-swf16                      [=not enabled]
--enable-swf17                      [=not enabled]
--enable-swf18                      [=not enabled]
--enable-swf19                      [=not enabled]
--enable-swf20                      [=not enabled]
--enable-sys-root-dir               [=not enabled]
--enable-tamarin                    [=enabled]
--enable-telemetry                  [=not enabled]
--enable-telemetry-sampler          [=not enabled]
--enable-threaded-interp            [=not enabled]
--enable-use-system-malloc          [=not enabled]
--enable-valgrind                   [=not enabled]
--enable-vtune                      [=not enabled]
--enable-wordcode-interp            [=not enabled]
--enable-zlib-include-dir           [=not enabled]
--enable-zlib-lib                   [=not enabled]
--target=...                        [=None]
--host=...                          [=None]
--ignore_unknown_flags=...          [=False]
--mac_sdk=...                       [=None]
--mac_xcode=...                     [=None]
--arm_arch=...                      [=armv7-a]
}}}

here few examples
{{{
#create an objdir folder
$ cd src
$ mkdir _build
$ cd _build

#then configure

#conf for a 32bit macintosh
$ ../configure.py --target=i386-darwin

#conf for a 32bit macintosh using the OSX 10.7 SDK
$ ../configure.py --mac-sdk=107 --target=i386-darwin

#conf for a 64bit macintosh
$ ../configure.py --target=x86_64-darwin

#conf for a 32bit macintosh with debug and debugger
$ ../configure.py --target=i386-darwin --enable-debug --enable-debugger

#conf for a 32bit windows
$ ../configure.py --target=i386-windows

#conf for a 64bit windows
$ ../configure.py --target=x86_64-windows

#etc...

#then make it so
$ make
}}}

if you want to modify the native classes in C++ and AS3<br>
you will need to use a compiled avmshell executable<br>
and declare it in your environment variables

for ex under OS X
{{{
$ pico ~/.profile

#and add
export AVMSHELL_TOOL="/path/to/avmshell"
}}}

you can not compile an original avmshell from redtamarin<br>
but you can find pre-compiled avmshells here
{{{
build
├── ant
│   └── ...
├── common.properties
├── shell
│   ├── darwin
│   │   └── avmshell
│   ├── linux
│   │   └── avmshell
│   └── windows
│        └── avmshell.exe
├── targets
│   └── ...
├── tasks
│   └── ...
└── version.properties
}}}