#summary HOWTO Build.

=== Introduction ===

Basically we follow the same process than Tamarin<br>
see [https://developer.mozilla.org/En/Tamarin/Tamarin_Build_Documentation Tamarin Build Documentation].

But we got all that wrapped up in a nice Ant build to automate a couple of things.


=== Ant ===

There is more than one type of build

==== Local ====

The local build use `build.xml` and should be used when you edit/add/remove code/features/bugs/etc. locally.

In short, it's what I use when I add features to redtamarin :).

simple usage
{{{
$ ant
}}}

The build will check if you have `asc.jar` available, if not, it will build it for you.

The build will always run the `nativegen.py` on the `shell_toplevel.as`.

And will finally run `make` from the `objdir-release`,<br>
if the `objdir-release` is not found, the build will run `configure.py` for you first.

So, by default, it will build redtamarin as *release*<br>
if an error occurs you will see the error message but not the stacktrace.

If you want to build as *release-debugger* use
{{{
$ ant -Dsetup=debugger
}}}
with that if an error occurs, on top of the error message you'll be able to see the stacktrace<br>
and you will be able to use options like `-Dastrace N`, `-Dverbose`, etc.

and If you want to build as *debug-debugger* use
{{{
$ ant -Dsetup=debug
}}}
almost the same as *release-debugger* but with that you'll be able to have even more debug infos.

in case of doubt, you can easyly test your runtime version
{{{
$ ./redshell -Dversion
shell 1.4 release-debugger build cyclone
features AVMSYSTEM_32BIT;AVMSYSTEM_UNALIGNED_INT_ACCESS;AVMSYSTEM_UNALIGNED_FP_ACCESS;
AVMSYSTEM_LITTLE_ENDIAN;AVMSYSTEM_IA32;AVMSYSTEM_MAC;AVMFEATURE_DEBUGGER;
AVMFEATURE_ALLOCATION_SAMPLER;AVMFEATURE_JIT;AVMFEATURE_ABC_INTERP;AVMFEATURE_EVAL;
AVMFEATURE_PROTECT_JITMEM;AVMFEATURE_SHARED_GCHEAP;AVMFEATURE_STATIC_FUNCTION_PTRS;
AVMFEATURE_MEMORY_PROFILER;AVMFEATURE_CACHE_GQCN;
}}}


==== Release ====

The release build use `release.xml` and should be used to produce a release of redtamarin.

That's basically all the files that end up in a zip files for the download section.

usage
{{{
$ ant -f release.xml
}}}

This build will always generate asc.jar.

This build will always run the `nativegen.py` on the `shell_toplevel.as`.

This build will always generate a *release* version of redtamarin, eg. *redshell*<br>
and also a *release-debugger* version, eg. *redshell_d*.

*note:*<br>
for now we keep things simple, so the `redshell` executable is always 32bit.<br>
Later, we will generate also 64bit versions.

And finally, everything is packaged in a zip
{{{
redtamarin_0.3.0.1234_WIN.zip
redtamarin_0.3.0.1234_OSX.zip
redtamarin_0.3.0.1234_NIX.zip
}}}


=== Misc. ===

==== file size ====
By default, the redtamarin executable is about 2MB, if you need a smaller executable<br>
there is [http://upx.sourceforge.net/ UPX], the Ultimate Packer for eXecutables :).

example:
{{{
$ upx --brute -o redshell_c redshell
....
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2009
UPX 3.04        Markus Oberhumer, Laszlo Molnar & John Reiser   Sep 27th 2009

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
   1983016 ->    607419   30.63%   Mach/AMD64    redshell_c                    

Packed 1 file.
}}}

Here, for example, the redshell executable is reduced to 600KB.

note:<br>
for OSX, you can install it this way `$sudo port install upx`


==== shell ====

We always compile redtamarin with the eval option, so you may want to use `redshell` in bash scripts :).

more infos<br>
TODO

note:<br>
sadly `eval()` will work only with builtins, you can not use FileSystem, OperatingSystem, etc.


==== server side ====

Technically you can use redtamarin right now as a CGI process on any server,<br>
wehn some API like MySQL and SQLite will be added I'll give more infos<br>
(and probably a whole wiki section just for the server side of things).

TODO