#summary use avmglue.

== Introduction ==

Avmglue is about being able to reuse AS3 code written for the Flash Player and AIR<br>
on the redshell command line.

The goal of `avmglue.abc` is to replicate `playerglobal.swc` and `airglobal.swc`.

See more informations:
  * [http://code.google.com/p/redtamarin/wiki/API#Layer_1_:_Flash_Platform API Layer 1 : Flash Platform]
  * [http://code.google.com/p/maashaack/wiki/avmglue the avmglue project page]
  * [http://code.google.com/p/redtamarin/wiki/FlashPlatform Flash Platform API]


you can [http://code.google.com/p/maashaack/downloads/list download avmglue here]

Quickly put, redtamarin does not have the same native implementations as Flash or AIR,<br>
but we can emulate them.

For ex, redtamarin define `getTimer()` in the `avmplus.System` class,<br>
and Flash/AIR define `getTimer()` in the `flash.utils` package.

The role of *avmglue* is to make the redtamarin APi compatible with Flash/AIR,<br>
by providing an implementation
{{{
package flash.utils
{
    import avmplus.System;
    
    public var getTimer:Function = function():int
    {
        return System.getTimer();
    }
}
}}}
same signature and behaviour as the FPAPI.

or by providing a mock
{{{
package flash.utils
{
    public var getTimer:Function = function():int
    {
        return 0;
    }
}
}}}
same signature as the FPAPI but no real code.

That way if you already spent hours writing AS3 code to make it run in Flash or AIR<br>
by using *avmglue.abc* you should be able to compile your code directly for redtamarin,<br>
or at least have a very minimal code effort to port your already existing library for the command line.

|| *Mind that avmglue is far from complete and the ideal situation described above is not there yet.* ||


== Details ==

After following the [GettingStarted getting started] instructions

1. you will need to add *avmglue.swc* next to *redtamarin.swc*

for ex:
{{{
..
  |_ bin
  |    |_ ...
  |
  |_ src
  |   |_ ...
  |
  |_ lib-swc
      |_ redtamarin.swc
      |_ avmglue.swc
}}}
<br>
<br>

2. you will need to update your *bin* folder with *avmglue.abc*

{{{
..
 |_ bin
     |_ abcdump
     |_ asc
     |_ asc.ajr
     |_ avmglue.abc     <- here
     |_ builtin.abc
     |_ createprojector
     |_ EclipseExternalTools
     |_ redshell
     |_ redshell_d
     |_ swfmake
     |_ toplevel.abc
}}}
<br>
<br>

3. and finally you will need to update your tools

copy *ASC_compile* to *ASC_compile_avmglue*

update the task from
{{{
Location: ${project_loc}/bin/asc
Working Directory: ${project_loc}/bin/
Arguments: -AS3 -strict -import builtin.abc -import toplevel.abc ${resource_loc}
}}}

to
{{{
Location: ${project_loc}/bin/asc
Working Directory: ${project_loc}/bin/
Arguments: -AS3 -strict -import builtin.abc -import toplevel.abc -import avmglue.abc ${resource_loc}
}}}
<br>

copy *redshell_debug* to *redshell_debug_avmglue*

update the task from
{{{
Location: ${project_loc}/bin/redshell_d
Working Directory: ${project_loc}/src/
Arguments: ${resource_loc}
}}}

to
{{{
Location: ${project_loc}/bin/redshell_d
Working Directory: ${project_loc}/src/
Arguments: ../bin/avmglue.abc ${resource_loc}
}}}


== Compiling ==

If you're dealing only with `*.abc` files, with `builtin.abc` and `toplevel.abc`<br>
because those libs are already embedded in the redshell executable<br>
you don't need to embed those `*.abc` in your `program.abc`.

With `avmglue.abc`it is different, there you HAVE TO embed it yourself,<br>
or your final `program.abc` will miss a library.

The shells can run different `*.abc` files at the same time:
{{{
$ ./redshell avmglue.abc program.abc
}}}

Doing like that is fine to run some tests when you're constantly compiling `program.abc`,<br>
but when you want to distribute your program it is less than ideal.


You can compile a single `*.abc` if you build everything from sources<br>
(eg. your program but also avmglue), and then use ASC with the option `-exe` to emit an executable.

The problem with that is that it defeat the purpose of distributing `avmglue.abc` as a library.


What you want is
  * compile your `program.abc`
  * reuse `avmglue.abc` as it is
  * embed everything in one executable

Here how to do that: use `swfmake` and `createprojector`
  * `swfmake` will allow you to stick different `*.abc` files in a `*.swf` file
  * `createprojector` will allow you to build an exe by merging one of the shells with that `*.swf`

{{{
$ ./swfmake -o program.swf -c avmglue.abc program.abc
$ ./createprojector -exe redshell -o program program.swf
}}}

Also wether you are on OS X / Linux / Windows you will be able to create an executable for all the other systems

by default I work under OS X, and so I run that to build an OS X executable
{{{
$ ./swfmake -o program.swf -c avmglue.abc program.abc
$ ./createprojector -exe redshell -o program program.swf
}}}

but from OS X, if I wanted to build a Windows exe, I could simply do that
{{{
$ ./swfmake -o program.swf -c avmglue.abc program.abc
$ ./createprojector -exe redshell.exe -o program.exe program.swf
}}}