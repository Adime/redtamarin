#summary The File System API.

<wiki:comment>
Because we are defining libraries for Tamarin we can not really use asdoc to document the source code.
So the rule is to document everything in the wiki page.
Yeah it sucks because we have to sync by hand, we'll try to automate it later.

on the source code file, we use only one comment

/* documentation: http://code.google.com/p/redtamarin/wiki/C_stdlib */
</wiki:comment>

= About =
Definition.

*package:* {{{avmplus.*}}}

*product:* redtamarin 0.3

*since:* 0.3.0

*references:*
 * link1
 * link2

----
= Properties =

== name ==
{{{
public function get name():String
}}}
Definition.

*since:* 0.3.0

----
= Methods =

== test ==
{{{
public function test():void
}}}
Definition test.

*since:* 0.3.0

----

== Introduction ==

The FileSystem API provides methods to access and manipulate computer files, directories and data.


== Details ==

 * everything is blocking
 * no support for unicode filename yet (eg. WIN32 use `char` not `wchar`
 * it's pretty "raw", no optimizations of any kind (eg. directories traversal)
 * no support for symlink, alias, shortcut


== API ==

*class* avmplus.FileSystem

*methods*
 * `exists( filename:String ):Boolean`
 * `read( filename:String ):String`
 * `write( filename:String, data:String ):void`
 * `getFileMode( filename:String ):int`
 * `canAccess( filename:String ):Boolean`
 * `canWrite( filename:String ):Boolean`
 * `canRead( filename:String ):Boolean`
 * `isRegularFile( filename:String ):Boolean`
 * `isDirectory( filename:String ):Boolean`
 * `listFiles( filename:String, directory:Boolean = false ):Array`
 * `getFreeDiskSpace( filename:String ):Number`
 * `getTotalDiskSpace( filename:String ):Number`
 * `getUsedDiskSpace( filename:String ):Number`
 * `fileToByteArray( filename:String ):ByteArray`
 * `writeByteArray( filename:String, bytes:ByteArray ):void`

*not implemented*
 * `getDrives():Array`
 * `isHidden( filename:String ):Boolean`
 * `isEmptyDirectory( filename:String ):Boolean`
 * `normalizePath( filename:String ):String`
 * `absolutePath( filename:String ):String`
 * `fileSize( filename:String ):Number`
 * `directorySize( filename:String, recursive:Boolean = false ):Number`
 * `getCreationTime( filename:String ):Date`
 * `getLastModifiedTime( filename:String ):Date`
 * `getLastOpenedTime( filename:String ):Date`
 * `totalSize( filename:String, recursive:Boolean = false ):Number`
 * `copyFile( origin:String, destination:String ):Boolean`
 * `copyDirectory( origin:String, destination:String ):Boolean`
 * `copy( origin:String, destination:String, recursive:Boolean = false ):Boolean`
 * `rename( filename:String, newname:String ):Boolean`
 * `move( filename:String, target:String ):Boolean`
 * `createDirectory( filename:String, recursive:Boolean = false ):Boolean`
 * `removeFile( filename:String ):Boolean`
 * `removeDirectory( filename:String, recursive:Boolean = false ):Boolean`
 * `remove( filename:String, recursive:Boolean = false ):Boolean`