#summary AVMPlus File System class.

<wiki:comment>
Here we can use asdoc to document the source code.
So the rule is to document the side notes in the wiki page.

/* more in depth informations: http://code.google.com/p/redtamarin/wiki/FileSystem */
</wiki:comment>

= About =
Provides methods to access and manipulate computer files, directories, paths and data.

*class:* {{{avmplus::FileSystem}}}

*product:* redtamarin 0.3

*since:* 0.3.0

*note:*
 * this class replace `avmplus::File`
 * everything is blocking
 * no support for unicode filename yet (eg. WIN32 use `char` not `wchar`
 * it's pretty "raw", no optimizations of any kind (eg. directories traversal)
 * no support for symlink, alias, shortcut

*vocabulary:*
 * *filename* : uniquely identify a file or directory stored on the file system
 * *path* : part of a filename

----
= Properties =

== separators ==
{{{
public static function get separators():Array
}}}
The character separators used by the operating system.

*note:*<br>
POSIX use `/`.<br>
WIN32 use `\`, tolerant of `/`.

*since:* 0.3.0

----
= Methods =

== test ==
{{{
public function test():void
}}}
Definition.

*since:* 0.3.0

----


*methods*
 * `exists( filename:String ):Boolean`
 * `read( filename:String ):String`
 * `write( filename:String, data:String ):void`
 * `getFileMode( filename:String ):int`
 * `canAccess( filename:String ):Boolean`
 * `canWrite( filename:String ):Boolean`
 * `canRead( filename:String ):Boolean`
 * `isRegularFile( filename:String ):Boolean`
 * `isDirectory( filename:String ):Boolean`
 * `listFiles( filename:String, directory:Boolean = false ):Array`
 * `getFreeDiskSpace( filename:String ):Number`
 * `getTotalDiskSpace( filename:String ):Number`
 * `getUsedDiskSpace( filename:String ):Number`
 * `fileToByteArray( filename:String ):ByteArray`
 * `writeByteArray( filename:String, bytes:ByteArray ):void`

*not implemented*
 * `getDrives():Array`
 * `isHidden( filename:String ):Boolean`
 * `isEmptyDirectory( filename:String ):Boolean`
 * `normalizePath( filename:String ):String`
 * `absolutePath( filename:String ):String`
 * `fileSize( filename:String ):Number`
 * `directorySize( filename:String, recursive:Boolean = false ):Number`
 * `getCreationTime( filename:String ):Date`
 * `getLastModifiedTime( filename:String ):Date`
 * `getLastOpenedTime( filename:String ):Date`
 * `totalSize( filename:String, recursive:Boolean = false ):Number`
 * `copyFile( origin:String, destination:String ):Boolean`
 * `copyDirectory( origin:String, destination:String ):Boolean`
 * `copy( origin:String, destination:String, recursive:Boolean = false ):Boolean`
 * `rename( filename:String, newname:String ):Boolean`
 * `move( filename:String, target:String ):Boolean`
 * `createDirectory( filename:String, recursive:Boolean = false ):Boolean`
 * `removeFile( filename:String ):Boolean`
 * `removeDirectory( filename:String, recursive:Boolean = false ):Boolean`
 * `remove( filename:String, recursive:Boolean = false ):Boolean`