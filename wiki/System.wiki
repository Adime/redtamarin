#summary AVMPlus System class.

<wiki:comment>
Here we can use asdoc to document the source code.
So the rule is to document the side notes in the wiki page.

/* more in depth informations: http://code.google.com/p/redtamarin/wiki/System */
</wiki:comment>

= About =
Represents the currently running application and the avmshell runtime.

*class:* {{{avmplus::System}}}

*product:* redtamarin 0.3

*since:* 0.3.0


= Constants =

== argv ==
{{{
public static const argv:Array
}}}
Contains the arguments passed to the program.

*note:*<br>
Initialised by the private native function `getArgv()`.<br>
Compared to C++ argv, `argv[0]` is not included<br>
but saved in `programFilename`.

*usage:*<br>
{{{
redshell.exe myprogram.abc -- -arg1 -arg2 arg3
}}}
when you are running an `*.abc` file with the avmshell<br>
you need to use `--` followed by the command line arguments.

{{{
myprogram.exe -arg1 -arg2 arg3
}}}
when you are running an independent executable (avmshell embedding an `*.abc` file)<br>
you pass directly the command line arguments (like any other exe).

*since:* 0.3.0


== startupDirectory ==
{{{
public static const startupDirectory:String
}}}
The original directory when the application started.

*note:*<br>
Initialised by the private native function `getStartupDirectory()`.

*since:* 0.3.0


= Properties =

== apiVersion ==
{{{
public native static function get apiVersion():int;
}}}
Return the value passed to -api at launch<br>
(or the default value, if -api was not specified).

*example:* basic usage
{{{
import avmplus.System;

trace( "API version : " + System.apiVersion ); //API version : 673
}}}

*since:* 0.3.0


== apiAlias ==
{{{
public static function get apiAlias():String
}}}
Returns the alias name of the api version.

*example:* basic usage
{{{
import avmplus.System;

trace( "API alias : " + System.apiAlias ); //API alias : AIR_2_7
}}}

*since:* 0.3.0


== programFilename ==
{{{
public native static function get programFilename():String;
}}}
Returns the program filename.

*note:*<br>
Contains the value of `argv[0]`, it can be a full path or not.<br>
Depending on wether you need to retrieve the executable name only<br>
or the full path of the directory, or both<br>
you will have to do your own parsing with the value.

*since:* 0.3.0


== swfVersion ==
{{{
public native static function get swfVersion():int;
}}}
Returns the value passed to -swfversion at launch<br>
(or the default value, if -swfversion was not specified).

*example:* basic usage
{{{
import avmplus.System;

trace( "SWF version : " + System.swfVersion ); //SWF version : 12
}}}

*since:* 0.3.0


== totalMemory ==
{{{
public native static function get totalMemory():Number;
}}}
Amount of real memory we've aqcuired from the OS.

*note:*<br>
The amount of memory (in bytes) currently in use that has been directly allocated by `redshell`.<br>
This property does not return all memory used by a `redshell` application<br>
or by the application (such as a projector).<br>
The [#privateMemory System.privateMemory] property reflects all memory used by an application.

*since:* 0.3.0


== freeMemory ==
{{{
public native static function get freeMemory():Number;
}}}
Part of [#totalMemory totalMemory] we aren't using.

*note:*<br>
The amount of memory (in bytes) that is allocated to `redshell` and that is not in use.<br>
This unused portion of allocated memory ([#totalMemory System.totalMemory]) fluctuates as garbage collection takes place.<br>
Use this property to monitor garbage collection.

*since:* 0.3.0


== privateMemory ==
{{{
public native static function get privateMemory():Number;
}}}
Process wide size of resident private memory.

*note:*<br>
The entire amount of memory (in bytes) used by an application.<br>
This is the amount of resident private memory for the entire process.<br>
Developers should use this property to determine the entire memory consumption of an application.

*since:* 0.3.0


== workingDirectory ==
{{{
public function get workingDirectory():String
public function set workingDirectory( value:String ):void
}}}
Allows to get or set the current working directory of the application.

*note:*<br>
reuse `getcwd()` and `chdir()` from [C_unistd C.unistd].

*since:* 0.3.0


= Methods =

== exit ==
{{{
public static function exit( status:int = -1 ):void
}}}
Terminates the program execution.

*example:* basic usage
{{{
import C.stdlib.*;
import avmplus.System;

var success:Boolean;

//... some logic to define success is true or false

if( success )
{
    System.exit( EXIT_SUCCESS );
}
else
{
    System.exit( EXIT_FAILURE );
}
}}}

*note:*<br>
Reuse `exit()` from [C_stdlib C.stdlib].<br>
If no arguments are passed will use `EXIT_SUCCESS` by default.

*since:* 0.3.0


== exec ==
{{{
public function exec( command:String ):int
}}}
Executes a system command.

*note:*<br>
Reuse `system()` from [C_stdlib C.stdlib].

*since:* 0.3.0


== test ==
<font color="red">not implemented</font><br>
<font color="blue">not native</font><br>
{{{
public function test():void
}}}
Definition test.

*since:* 0.3.0

----