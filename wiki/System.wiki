#summary AVMPlus System class.

<wiki:comment>
Here we can use asdoc to document the source code.
So the rule is to document the side notes in the wiki page.

/* more in depth informations: http://code.google.com/p/redtamarin/wiki/System */
</wiki:comment>

= About =
Represents the currently running application and the avmshell runtime.

*class:* {{{avmplus::System}}}

*product:* redtamarin 0.3

*since:* 0.3.0


----

= Constants =

== argv ==
{{{
public static const argv:Array
}}}
Contains the arguments passed to the program.

*note:*<br>
Initialised by the private native function `getArgv()`.<br>
Compared to C++ argv, `argv[0]` is not included<br>
but saved in `programFilename`.

*usage:*<br>
{{{
redshell.exe myprogram.abc -- -arg1 -arg2 arg3
}}}
when you are running an `*.abc` file with the avmshell<br>
you need to use `--` followed by the command line arguments.

{{{
myprogram.exe -arg1 -arg2 arg3
}}}
when you are running an independent executable (avmshell embedding an `*.abc` file)<br>
you pass directly the command line arguments (like any other exe).

*since:* 0.3.0


== startupDirectory ==
{{{
public static const startupDirectory:String
}}}
The original directory when the application started.

*note:*<br>
Initialised by the private native function `getStartupDirectory()`.

*since:* 0.3.0


= Properties =

== apiVersion ==
{{{
public native static function get apiVersion():int;
}}}
Return the value passed to -api at launch<br>
(or the default value, if -api was not specified).

*example:* basic usage
{{{
import avmplus.System;

trace( "API version : " + System.apiVersion ); //API version : 673
}}}

*since:* 0.3.0


== apiAlias ==
{{{
public static function get apiAlias():String
}}}
Returns the alias name of the api version.

*example:* basic usage
{{{
import avmplus.System;

trace( "API alias : " + System.apiAlias ); //API alias : AIR_2_7
}}}

*since:* 0.3.0


== programFilename ==
{{{
public native static function get programFilename():String;
}}}
Returns the program filename.

*note:*<br>
Contains the value of `argv[0]`, it can be a full path or not.<br>
Depending on wether you need to retrieve the executable name only<br>
or the full path of the directory, or both<br>
you will have to do your own parsing with the value.

*since:* 0.3.0


== swfVersion ==
{{{
public native static function get swfVersion():int;
}}}
Returns the value passed to -swfversion at launch<br>
(or the default value, if -swfversion was not specified).

*example:* basic usage
{{{
import avmplus.System;

trace( "SWF version : " + System.swfVersion ); //SWF version : 12
}}}

*since:* 0.3.0


== totalMemory ==
{{{
public native static function get totalMemory():Number;
}}}
Amount of real memory we've aqcuired from the OS.

*note:*<br>
The amount of memory (in bytes) currently in use that has been directly allocated by `redshell`.<br>
This property does not return all memory used by a `redshell` application<br>
or by the application (such as a projector).<br>
The [#privateMemory System.privateMemory] property reflects all memory used by an application.

*since:* 0.3.0


== freeMemory ==
{{{
public native static function get freeMemory():Number;
}}}
Part of [#totalMemory totalMemory] we aren't using.

*note:*<br>
The amount of memory (in bytes) that is allocated to `redshell` and that is not in use.<br>
This unused portion of allocated memory ([#totalMemory System.totalMemory]) fluctuates as garbage collection takes place.<br>
Use this property to monitor garbage collection.

*since:* 0.3.0


== privateMemory ==
{{{
public native static function get privateMemory():Number;
}}}
Process wide size of resident private memory.

*note:*<br>
The entire amount of memory (in bytes) used by an application.<br>
This is the amount of resident private memory for the entire process.<br>
Developers should use this property to determine the entire memory consumption of an application.

*since:* 0.3.0


== workingDirectory ==
{{{
public function get workingDirectory():String
public function set workingDirectory( value:String ):void
}}}
Allows to get or set the current working directory of the application.

*note:*<br>
reuse `getcwd()` and `chdir()` from [C_unistd C.unistd].

*since:* 0.3.0


= Methods =

== exec ==
{{{
public function exec( command:String ):int
}}}
Executes the specified command line and returns the status code.

*note:*<br>
Reuse `system()` from [C_stdlib C.stdlib].

*since:* 0.3.0


== exit ==
{{{
public static function exit( status:int = -1 ):void
}}}
Terminates the program execution.

*example:* basic usage
{{{
import C.stdlib.*;
import avmplus.System;

var success:Boolean;

//... some logic to define success is true or false

if( success )
{
    System.exit( EXIT_SUCCESS );
}
else
{
    System.exit( EXIT_FAILURE );
}
}}}

*note:*<br>
Reuse `exit()` from [C_stdlib C.stdlib].<br>
If no arguments are passed will use `EXIT_SUCCESS` by default.

*since:* 0.3.0


== getAvmplusVersion ==
{{{
public native static function getAvmplusVersion():String;
}}}
Returns the current version of AVM+ in the form `"1.0 d100"`.

*example:* basic usage
{{{
import avmplus.System;

trace( "AVMplus version : " + System.getAvmplusVersion() ); //AVMplus version : 1.4 cyclone
}}}

*since:* 0.3.0


== getRedtamarinVersion  ==
{{{
public static function getRedtamarinVersion():String
}}}
Returns the current version of the !RedTamarin API.

*example:* basic usage
{{{
import avmplus.System;

trace( "RedTamarin version : " + System.getRedtamarinVersion() ); //RedTamarin version : 0.3.0
}}}

*since:* 0.3.0


== getFeatures ==
{{{
public native static function getFeatures():String;
}}}
Returns the compiled in features of AVM+.

*example:* basic usage
{{{
import avmplus.System;

trace( "AVMplus features :" )
trace( System.getFeatures().split( ";" ).join( "\n" ) );

/* output:

AVMplus features :
AVMSYSTEM_32BIT
AVMSYSTEM_UNALIGNED_INT_ACCESS
AVMSYSTEM_UNALIGNED_FP_ACCESS
AVMSYSTEM_LITTLE_ENDIAN
AVMSYSTEM_IA32
AVMSYSTEM_MAC
AVMFEATURE_DEBUGGER
AVMFEATURE_ALLOCATION_SAMPLER
AVMFEATURE_JIT
AVMFEATURE_ABC_INTERP
AVMFEATURE_EVAL
AVMFEATURE_PROTECT_JITMEM
AVMFEATURE_SHARED_GCHEAP
AVMFEATURE_STATIC_FUNCTION_PTRS
AVMFEATURE_MEMORY_PROFILER
AVMFEATURE_CACHE_GQCN
AVMTWEAK_EXACT_TRACING

*/
}}}

*since:* 0.3.0


== getRunmode ==
{{{
public native static function getRunmode():String;
}}}
Returns the current runmode.

*note:*<br>
Can returns "mixed", "jitordie", "jit", "interp", "unknown".

*since:* 0.3.0


== getTimer ==
{{{
public native static function getTimer():uint;
}}}
Returns the number of milliseconds that have elapsed<br>
since the AMV+ started.

*since:* 0.3.0


== readLine ==
<font color="orange">blocking</font><br>
{{{
public native static function readLine():String;
}}}
Waits and returns all the characters entered by the user.

*example:* basic usage
{{{
import avmplus.System;

trace( "what is your name ?" );
var input:String = System.readLine();
trace( "your name is \"" + input + "\"" );

/* input1:
     totoro

     output:
     your name is "totoro"
*/

/* input2:
    トトロ

     output:
     your name is "ããã"
*/
}}}

*note:*<br>
Read *stdin*.<br>
The function will stop when it encounters `\n` or `EOF`.<br>
Does not support Unicode characters.

*since:* 0.3.0


== trace ==
{{{
public native static function trace( a:Array ):void;
}}}
Writes arguments to the command line and returns to the line.

*example:* basic usage
{{{
import avmplus.System;

System.trace( ["hello world"] ); //hello world
System.trace( ["トトロ"] ); //トトロ
}}}

*note:*<br>
Write to *stdout*.<br>
Support Unicode characters.

*since:* 0.3.0


== write ==
{{{
public native static function write( s:String ):void;
}}}
Writes a string to the command line.

*example:* basic usage
{{{
import avmplus.System;

System.write( "hello" );
System.write( " world" );
System.write( "\n" ); //hello world
System.write( "ト" );
System.write( "ト" );
System.write( "ロ" );
System.write( "\n" ); //トトロ
}}}

*note:*<br>
Write to *stdout*.<br>
Support Unicode characters.

*since:* 0.3.0


== stdinLength ==
{{{
public native static function get stdinLength():Number;
}}}
Returns the length of the stdin buffer.

*note:*<br>
this not the whole length of stdin, only its buffer,<br>
so if you need to get the full size of stdin you will have to loop<br>
see `stdinRead()`.

*since:* 0.3.0


== stdinRead ==
{{{
public native static function stdinRead( length:uint ):ByteArray;
}}}
Returns the length of `bytes` read from stdin.

*example:* read stdin in an exectuable
{{{
$ cat somefile.bin | ./redshell test.abc
}}}
or
{{{
$ cat somefile.bin | ./test
}}}
the pipe `|` will pass the binary content to the stdin of the shell,<br>
here how to parse it
{{{
import avmplus.System;
import flash.utils.ByteArray;

var bytes:ByteArray = new ByteArray();
var part:ByteArray;

var len:Number = System.stdinLength;

while( len > 0 )
{
    part = System.stdinRead( System.stdinLength ); //read stdin buffer
    bytes.writeBytes( part ); //append the bytes
    len = System.stdinLength; //refresh buffer
}

trace( "total bytes received = " + bytes.length );
}}}

*example:* read post data with CGI
{{{
import avmplus.System;
import flash.utils.ByteArray;
import C.stdlib.*;

var postSize:int = int( getenv("CONTENT_LENGTH") );

if( postSize > 0 )
{
    var postData:ByteArray = System.stdinRead( postSize );
    //...
}
//...
}}}


*since:* 0.3.0

== debugger ==
{{{
public native static function debugger():void;
}}}
Enters debugger.

*since:* 0.3.0


== isDebugger ==
{{{
public native static function isDebugger():Boolean;
}}}
Tests if the current program is compiled with debugger flags.

*since:* 0.3.0


== forceFullCollection ==
{{{
public native static function forceFullCollection():void;
}}}
Initiate a garbage collection<br>
(future versions will not return before completed).

*since:* 0.3.0


== queueCollection  ==
{{{
public native static function queueCollection():void;
}}}
Queue a garbage collection request.

*since:* 0.3.0


== disposeXML ==
{{{
public native static function disposeXML( xml:XML ):void;
}}}
Makes the specified XML object immediately available for garbage collection.

*note:*<br>
This method will remove parent and child connections between<br>
all the nodes for the specified XML node.

*since:* 0.3.0


----