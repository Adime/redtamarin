#summary about the ActionScript Compiler.

=== Introduction ===

The !ActionScript Compiler 2.0, or *ASC2*, has been introduced as part of the AIR 3.4/FP 11.4 SDK preview
and Flash Builder 4.7 Preview.

*ASC2* is now distributed with *Flash CC* (Flash C++ Compiler) and the *AIR SDK* (since AIR 3.6).

Written in Java, and distributed as a Jar file (asc2.jar), same as ASC<br>
it allows to compile `*.as` source code to an `*.abc` file ([ABC ActionScript Byte Code]),<br>
or to a `*.swf` file, or to an executable file.

=== Options ===

{{{
ActionScript 3.0 Compiler for AVM+
Version 2.0.0 build 348281
Copyright 2003-2012 Adobe Systems Incorporated. All rights reserved.

usage: asc [-abcfuture] [-api <version>] [-AS3] [-avmtarget <vm version
       number>] [-b] [-coach] [-config <ns::name=value>] [-d] [-doc]
       [-ES] [-ES4] [-exe <avmplus path>] [-f] [-h] [-i] [-import
       <filename>] [-in <filename>] [-inline] [-l] [-language <lang>]
       [-le <swc file>] [-li <swc file>] [-log] [-m] [-md] [-merge]
       [-movieclip] [-o] [-o2 <name=value>] [-optimize] [-out
       <basename>] [-outdir <output directory name>] [-p] [-parallel]
       [-removedeadcode] [-sanity] [-static] [-strict] [-swf
       <classname,width,height[,fps]>] [-use <namespace>] [-warnings]
       FILENAME...
options:
 -abcfuture                            future abc
 -api <version>                        compile program as a specfic version between 660 and 670
 -AS3                                  use the AS3 class based object model for greater performance and better error reporting
 -avmtarget <vm version number>        emit bytecode for a target virtual machine version, 1 is AVM1, 2 is AVM2
 -b                                    show bytes
 -coach                                warn on common actionscript mistakes (deprecated)
 -config <ns::name=value>              define a configuration value in the namespace ns
 -d                                    emit debug info into the bytecode
 -doc                                  emit asdoc info
 -ES                                   use the ECMAScript edition 3 prototype based object model to allow dynamic overriding of prototype properties
 -ES4                                  use ECMAScript 4 dialect
 -exe <avmplus path>                   emit an exe file (projector)
 -f                                    print the flow graph to standard out
 -h,--help                             print this help message
 -i                                    write intermediate code to the .il file
 -import <filename>                    make the packages in the abc file available for import
 -in <filename>                        include the specified source file
 -inline                               turn on the inlining of functions
 -l                                    show line numbers
 -language <lang>                      set the language for output strings {EN|FR|DE|IT|ES|JP|KR|CN|TW}
 -le,--libraryext <swc file>           import a swc as external library
 -li,--library <swc file>              import a swc library
 -log                                  redirect all error output to a logfile
 -m                                    write the avm+ assembly code to the .il file
 -md                                   emit metadata information into the bytecode
 -merge                                merge the compiled source into a single output file
 -movieclip                            make movieclip
 -o,--O                                produce an optimized abc file
 -o2,--O2 <name=value>                 optimizer configuration
 -optimize                             produce an optimized abc file
 -out <basename>                       Change the basename of the output file
 -outdir <output directory name>       Change the directory of the output files
 -p                                    write parse tree to the .p file
 -parallel                             turn on 'paralle generation of method bodies' feature for Alchemy
 -removedeadcode                       remove dead code when -optimize is set
 -sanity                               system-independent error/warning output -- appropriate for sanity testing
 -static                               use static semantics
 -strict,--!                           treat undeclared variable and method access as errors
 -swf <classname,width,height[,fps]>   emit a SWF file
 -use <namespace>                      automatically use a namespace when compiling this code
 -warnings                             warn on common actionscript mistakes
}}}

=== Improvements ===

 * Flash Builder 4.7 and the ASC 2.0 command-line compiler now share the same code model. This avoids duplicate representations of a program and means the IDE has an accurate representation of the language - matching the compiler.
 * A new multi-threaded architecture allows multiple files to be compiled at once, improving compilation time.
 * Better constant-folding and constant-propagation results in better performing code at runtime.
 * Reduces function overhead by removing unnecessary activation records.
 * Contains some demonstration byte-code optimizations for in-lining and dead code elimination.
 * Non-linear control flow added to AS3 through a new 'goto' keyword.
 * SWF 13 with LZMA compression is now supported.
 * A new symbol management system means Flash Builder 4.7 ActionScript workspaces that mix Flash and AIR projects should incrementally compile much faster.
 * ASC 2.0 based versions of fontswf, optimizer, swfdump and swcdepends command-line tools are available.
 * Font transcoding has been removed from [Embed] syntax. Fonts should be pre-transcoded and embedded as a SWF, which can be performed using a tool like fontswf or Flash Professional CS6.
 * Relative paths in source code ([Embed] assets, includes, etc...) resolve relatively from the including file. To specify a path relative from a source root, prefix your path with a forward slash '/'.
 * US English compiler error messages have been translated into French, Japanese, and Simplified Chinese. The locale is determined by the JVM and can be overridden using the -tools-locale configuration option.
 * Added support for inlining. When the inlining feature is enabled, the compiler will attempt to inline getters, setters and any functions which are decorated with [Inline] metadata.
 * Added support for fast memory opcodes


=== Usage ===

with helloworld.as
{{{
trace( "hello world" );
}}}

a very basic usage
{{{
$ java -jar asc2.jar -AS3 -import builtin.abc -import toplevel.abc helloworld.as
helloworld.abc, 127 bytes written
}}}

When you need to compile "system" libraries you will need more options
{{{
$ java -jar asc2.jar -abcfuture -import builtin.abc
   shell_toplevel.as Domain.as ByteArray.as ...
}}}

compile an abc API compatible with AIR_2_0
{{{
$ java -jar asc2.jar -AS3 -api 668 -import builtin.abc -import toplevel.abc helloworld.as
helloworld.abc, 127 bytes written
}}}

*note:*<br>
here the list of options for api (see: [http://hg.mozilla.org/tamarin-redux/file/5571cf86fc68/core/api-versions.as api-versions.as])<br>
  * *660* = FP_9_0
  * *661* = AIR_1_0
  * *662* = FP_10_0
  * *663* = AIR_1_5
  * *664* = AIR_1_5_1
  * *665* = FP_10_0_32
  * *666* = AIR_1_5_2
  * *667* = FP_10_1
  * *668* = AIR_2_0
  * *669* = AIR_2_5
  * *670* = FP_10_2
the rest is either not supported or asc2 documentation is not up to date ???

swc are now supported too :)
{{{
$ java -jar asc2.jar -AS3 -import builtin.abc -import toplevel.abc -li logd.swc helloworld.as
helloworld.abc, 127 bytes written
}}}

or

{{{
$ java -cp asc2.jar com.adobe.flash.compiler.clients.ASC -help

ActionScript 3.0 Compiler for AVM+
Version 2.0.0 build 348281
Copyright 2003-2012 Adobe Systems Incorporated. All rights reserved.
...
}}}

{{{
$ java -cp asc2.jar com.adobe.flash.compiler.clients.COMPC -help

Adobe SWC Component Compiler (compc)
Version 2.0.0 build 348281
Copyright 2004-2012 Adobe Systems Incorporated. All rights reserved.
...
}}}

{{{
$ java -cp asc2.jar com.adobe.flash.compiler.clients.MXMLC -help

Adobe ActionScript Compiler (mxmlc)
Version 2.0.0 build 348281
Copyright 2004-2012 Adobe Systems Incorporated. All rights reserved.
...
}}}

yes, ASC2 contains all the compilers: ASC, COMPC and MXMLC<br>
hence the much bigger size

{{{
asc.jar ~= 1.3MB
asc2.jar ~= 17.4MB
}}}


=== Misc. ===

You can find *asc2.jar* in the Flash C++ Compiler SDK

here
{{{
/SDK/FlashCC 1.0/sdk/usr/lib/asc2.jar

FlashCC 1.0/
.
├── License_en-US.html
├── License_fr-FR.html
├── README.html
├── docs
│   ├── …
│
├── samples
│   ├── …
│
└── sdk
    ├── usr
    │   ├── bin
    │   ├── include
    │   ├── lib     <== here
    │   ├── libexec
    │   └── share
    └── ver.txt
}}}

or

you can find *compiler.jar* in the latest AIR SDK (3.6 and 3.7)

here
{{{
/SDK/AIR/sdks/AIR_3_7_ASC2/lib/compiler.jar


AIR_3_7_ASC2/
.
├── AIR\ SDK\ Readme.txt
├── AIR\ SDK\ license.pdf
├── air-sdk-description.xml
├── airsdk.xml
├── ant
│   └── …
│
├── asdoc
│   └── …
│
├── bin
│   └── …
│
├── frameworks
│   └── …
│
├── include
│   └── …
│
├── lib      <== here
│   └── ...
├── runtimes
│   └── …
│
├── samples
│   └── …
│
└── templates
    └── …

}}}

use it like that
{{{
$ java -cp compiler.jar com.adobe.flash.compiler.clients.ASC -help

ActionScript 3.0 Compiler for AVM+
Version 2.0.0 build 348281
Copyright 2003-2012 Adobe Systems Incorporated. All rights reserved.
...
}}}



=== Ressources ===

*links:*
 * [http://www.bytearray.org/?p=4789 Introducing ASC 2.0] by Thibault Imbert (Adobe)
 * [http://helpx.adobe.com/flash-builder/actionscript-compiler-backward-compatibility.html ActionScript Compiler 2.0 Backward Compatibility] (Adobe Documentation)
 * [http://gaming.adobe.com/technologies/flascc/ Flash C++ Compiler] (Adobe)
 * [http://www.adobe.com/devnet/air/air-sdk-download.html Download Adobe AIR SDK] (Adobe)
 * [http://obtw.wordpress.com/2013/04/03/making-bytearray-faster/ Making ByteArray faster] by Romil Mittal (Adobe)

*documents:*
 * (PDF) [http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/flashplayer/pdfs/adobe-actionscript-compiler-20-release-notes.pdf ActionScript Compiler 2.0 release notes] (Adobe)