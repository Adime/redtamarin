#summary AVMPlus Standard Stream interface.

<wiki:comment>
Here we can use asdoc to document the source code.
So the rule is to document the side notes in the wiki page.

/* more in depth informations: http://code.google.com/p/redtamarin/wiki/StandardStream */
</wiki:comment>

= About =
Defines a Standard Stream (either stdout, stderr or stdin).

*interface* {{{avmplus::StandardStream}}}

*product:* redtamarin 0.3

*since:* 0.3.2


see: http://en.wikipedia.org/wiki/Standard_streams

----
= Methods =

== read ==
{{{
function read( length:uint = 0 ):String;
}}}
Reads the amount of `length` (or all) from the stream in text mode.

*since:* 0.3.2


== readBinary ==
{{{
function readBinary( length:uint = 0 ):ByteArray;
}}}
Reads the amount of `length` (or all) from the stream in binary mode.

*since:* 0.3.2


== write ==
{{{
function write( data:String ):void;
}}}
Writes string data to the stream in text mode.

*since:* 0.3.2



== writeBinary ==
{{{
function writeBinary( bytes:ByteArray ):void;
}}}
Writes binary data to the stream in binary mode.

*since:* 0.3.2



== toString ==
{{{
function toString():String;
}}}
Returns the stream type.

*since:* 0.3.2


----

= Implementations =

We have 3 classes implementing the 3 standard streams<br>
`StandardStreamOut` implements *stdout*<br>
`StandardStreamErr` implements *stderr*<br>
`StandardStreamIn` implements *stdin*

You don't need to instantiate those classes yourself as there are accessible as properties
form the `System` class.<br>
see [System#stdout System.stdout]<br>
see [System#stderr System.stderr]<br>
see [System#stdin System.stdin]


`StandardStreamOut` and `StandardStreamErr` will throw errors with the methods `read()` and `readBinary()`.

`StandardStreamIn` will throw errors with the methods `write()` and `writeBinary()`.

<br>
<br>

= Details =

You will need to use some functions in *C.stdio* for some special cases.